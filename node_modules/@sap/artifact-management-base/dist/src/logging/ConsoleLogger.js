"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.consoleLogger = exports.getLogLevelType = void 0;
function getLogLevelType(level) {
    let lev = 'info';
    switch (level) {
        case 'fatal':
            lev = 'fatal';
            break;
        case 'error':
            lev = 'error';
            break;
        case 'warn':
            lev = 'warn';
            break;
        case 'info':
            lev = 'info';
            break;
        case 'debug':
            lev = 'debug';
            break;
        case 'trace':
            lev = 'trace';
            break;
        default:
            lev = 'off';
            break;
    }
    return lev;
}
exports.getLogLevelType = getLogLevelType;
const LoggerWeight = Object.freeze({
    off: { v: 6 },
    trace: { v: 0 },
    debug: { v: 1 },
    info: { v: 2 },
    warn: { v: 3 },
    error: { v: 4 },
    fatal: { v: 5 },
});
/**
 * Empty Implementation of the Logger in case none is provided via Dependency Injection.
 * An alternative implementation could log to the console or provide another (real) implementation.
 *
 * @type {IChildLogger}
 */
class ConsoleLogger {
    constructor() {
        this.logLevel = 'error';
    }
    isEnabled(logLevel) {
        if (LoggerWeight[logLevel].v >= LoggerWeight[this.logLevel].v) {
            return true;
        }
        return false;
    }
    fatal(msg, ...args) {
        if (this.isEnabled('fatal')) {
            console.error(msg, ...args);
        }
    }
    error(msg, ...args) {
        if (this.isEnabled('error')) {
            console.error(msg, ...args);
        }
    }
    warn(msg, ...args) {
        if (this.isEnabled('warn')) {
            console.warn(msg, ...args);
        }
    }
    ;
    info(msg, ...args) {
        if (this.isEnabled('info')) {
            console.info(msg, ...args);
        }
    }
    ;
    debug(msg, ...args) {
        if (this.isEnabled('debug')) {
            console.debug(msg, ...args);
        }
    }
    ;
    trace(msg, ...args) {
        if (this.isEnabled('trace')) {
            console.trace(msg, ...args);
        }
    }
    ;
    changeLevel(newLevel) {
        this.logLevel = newLevel;
    }
    changeSourceLocationTracking(newSourceLocation) { }
    ;
    getChildLogger() {
        return this;
    }
}
;
exports.consoleLogger = new ConsoleLogger();
//# sourceMappingURL=ConsoleLogger.js.map