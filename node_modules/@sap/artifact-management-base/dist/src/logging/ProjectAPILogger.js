"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const winston_1 = __importDefault(require("winston"));
const winston_daily_rotate_file_1 = __importDefault(require("winston-daily-rotate-file"));
function getFileTransport() {
    return new winston_daily_rotate_file_1.default({
        filename: 'ProjectApi-%DATE%.log',
        dirname: '/tmp',
        maxSize: '10m',
        maxFiles: 5,
        format: winston_1.default.format.combine(winston_1.default.format.timestamp({ format: 'YYYY-MM-DD hh:mm:ss Z' }), logMessageFormatter),
    });
}
const logMessageFormatter = winston_1.default.format.printf(({ level, message, timestamp }) => {
    return `[${timestamp}]:[${level}]: ${message}`;
});
const winstonLogger = winston_1.default.createLogger({
    level: 'debug',
});
class ProjectAPILogger {
    constructor(logger) {
        this._instance = logger;
        ProjectAPILogger.enableConsoleAndFileLogging('debug', ProjectAPILogger.logToConsole);
    }
    fatal(msg, ...args) {
        this._instance.fatal(msg, ...args);
        if (ProjectAPILogger.logToAdditionalTransports) {
            winstonLogger.error(msg, ...args);
        }
    }
    error(msg, ...args) {
        this._instance.error(msg, ...args);
        if (ProjectAPILogger.logToAdditionalTransports) {
            winstonLogger.error(msg, ...args);
        }
    }
    warn(msg, ...args) {
        this._instance.warn(msg, ...args);
        if (ProjectAPILogger.logToAdditionalTransports) {
            winstonLogger.warn(msg, ...args);
        }
    }
    info(msg, ...args) {
        this._instance.debug(msg, ...args);
        //This change is done as extensions like Project Home page, see a lot of messages
        //from project API when they have set log level to Info.
        //so bumping down our levels one down ensures by default only project home page messages are shown
        //If we want to debug project API then we can change log level one level down to debug and then all our messages will start 
        // appearing.
        if (ProjectAPILogger.logToAdditionalTransports) {
            winstonLogger.info(msg, ...args);
        }
    }
    debug(msg, ...args) {
        this._instance.trace(msg, ...args);
        //See comments provided in `info` method.
        //If we want this, we need to set log level to trace in BAS plugin preference.
        if (ProjectAPILogger.logToAdditionalTransports) {
            winstonLogger.debug(msg, ...args);
        }
    }
    trace(msg, ...args) {
        this._instance.trace(msg, ...args);
        if (ProjectAPILogger.logToAdditionalTransports) {
            winstonLogger.silly(msg, ...args);
        }
    }
    getChildLogger(opts) {
        return this._instance;
    }
    static enableConsoleAndFileLogging(logLevel, logToConsole) {
        ProjectAPILogger.logToAdditionalTransports = true;
        const transports = [];
        transports.push(getFileTransport());
        if (logToConsole) {
            ProjectAPILogger.logToConsole = logToConsole;
            transports.push(new winston_1.default.transports.Console({
                format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.timestamp({ format: 'YYYY-MM-DD hh:mm:ss Z' }), logMessageFormatter),
            }));
        }
        const level = logLevel ? logLevel : 'info';
        winston_1.default.clear();
        winstonLogger.configure({
            level: level,
            transports: transports,
        });
    }
    profileOperation(operationName) {
        const startTime = new Date();
        this.info(`Start Operation - '${operationName}'`);
        const logEndOperation = () => {
            const endTime = new Date();
            this.info(`End Operation - '${operationName}'- Time taken: ${(endTime.getTime() - startTime.getTime())} (ms)`);
        };
        return logEndOperation;
    }
}
exports.default = ProjectAPILogger;
ProjectAPILogger.logToAdditionalTransports = false;
ProjectAPILogger.logToConsole = false;
//# sourceMappingURL=ProjectAPILogger.js.map