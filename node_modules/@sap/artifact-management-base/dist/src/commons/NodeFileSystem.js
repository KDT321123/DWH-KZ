"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFileSystem = void 0;
const fs_1 = require("fs");
const LoggerManager_1 = require("../logging/LoggerManager");
const ProjectFileSystem_1 = __importDefault(require("../commons/ProjectFileSystem"));
class NodeFileSystem extends ProjectFileSystem_1.default {
    navigate(...paths) {
        return new NodeFileSystem(this.path(...paths), this.rootPath);
    }
    getNewInstance(basePath, rootPath) {
        return new NodeFileSystem(basePath, rootPath);
    }
    async stat(path) {
        return await fs_1.promises.stat(this.path(path));
    }
    async fileExists(path) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`NodeFileSystem.fileExists path - ${path}`);
        try {
            const stats = await this.stat(path);
            profileDone();
            return stats.isFile();
        }
        catch (error) {
            if (error.code = 'E_NOENT')
                return false;
            throw error;
        }
    }
    async directoryExists(path) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`NodeFileSystem.directoryExists - ${path}`);
        try {
            const stats = await this.stat(path);
            profileDone();
            return stats.isDirectory();
        }
        catch (error) {
            if (error.code = 'ENOENT')
                return false;
            throw error;
        }
    }
    async mkdir(path = '.', options) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`NodeFileSystem.mkdir - ${path}`);
        await fs_1.promises.mkdir(this.path(path), options);
        profileDone();
    }
    async readTextFile(path, absolutePath) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`NodeFileSystem.readTextFile - ${path}`);
        const realPath = absolutePath ? path : this.path(path);
        return fs_1.promises.readFile(realPath, { encoding: 'utf-8' })
            .then(response => {
            profileDone();
            return response;
        });
    }
    async writeTextFile(path, str) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`NodeFileSystem.writeTextFile - ${path}`);
        await fs_1.promises.writeFile(this.path(path), str, 'utf8');
        profileDone();
    }
    async readDirectories() {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`NodeFileSystem.readDirectories()- ${this.path}`);
        const dirEntries = await fs_1.promises.readdir(this.path());
        const directories = [];
        for (const dirEntry of dirEntries) {
            if (await this.directoryExists(dirEntry))
                directories.push(dirEntry);
        }
        profileDone();
        return directories;
    }
    async readFiles({ ext } = {}) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`NodeFileSystem.readFiles - ${this.path()} - ext : ${ext}`);
        const dirEntries = await fs_1.promises.readdir(this.path());
        const files = [];
        const extWithDot = ext ? `.${ext}` : '';
        for (const dirEntry of dirEntries) {
            if (ext && !dirEntry.endsWith(extWithDot))
                continue;
            if (await this.fileExists(dirEntry))
                files.push(dirEntry);
        }
        profileDone();
        return files;
    }
    async rm(path = '.', options) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`NodeFileSystem.rm - ${path}`);
        await fs_1.promises.rm(this.path(path), options);
        profileDone();
    }
}
exports.NodeFileSystem = NodeFileSystem;
//# sourceMappingURL=NodeFileSystem.js.map