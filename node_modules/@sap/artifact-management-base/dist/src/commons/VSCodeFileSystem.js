"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VSCodeFileSystem = void 0;
const ProjectFileSystem_1 = __importDefault(require("./ProjectFileSystem"));
const util_1 = require("util");
const LoggerManager_1 = require("../logging/LoggerManager");
const lodash_1 = __importDefault(require("lodash"));
const vscode_1 = __importDefault(require("vscode"));
class VSCodeFileSystem extends ProjectFileSystem_1.default {
    constructor(basePath, rootPath) {
        super(basePath, rootPath);
    }
    getNewInstance(basePath, rootPath) {
        return new VSCodeFileSystem(basePath, rootPath);
    }
    navigate(...paths) {
        return new VSCodeFileSystem(this.path(...paths), this.rootPath);
    }
    async mkdir(path = '.') {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`VSCodeFileSystem.mkdir ${path}`);
        path = this.path(path);
        const uri = vscode_1.default.Uri.file(path);
        await vscode_1.default.workspace.fs.createDirectory(uri);
        profileDone();
    }
    async stat(path) {
        path = this.path(path);
        const uri = vscode_1.default.Uri.file(path);
        return vscode_1.default.workspace.fs.stat(uri);
    }
    async fileExists(path) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`VSCodeFileSystem.fileExists - ${path}`);
        try {
            const stats = await this.stat(path);
            profileDone();
            return stats.type === vscode_1.default.FileType.File;
        }
        catch (error) {
            if (error.code = 'E_NOENT')
                return false;
            throw error;
        }
    }
    async directoryExists(path) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`VSCodeFileSystem.directoryExists ${path}`);
        try {
            const stats = await this.stat(path);
            profileDone();
            return stats.type === vscode_1.default.FileType.Directory;
        }
        catch (error) {
            if (error.code = 'ENOENT')
                return false;
            throw error;
        }
    }
    async readTextFile(path, absolutePath) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`VSCodeFileSystem.readTextFile - ${path}`);
        let textData = '';
        try {
            path = this.path(path);
            const uri = vscode_1.default.Uri.file(path);
            const data = await vscode_1.default.workspace.fs.readFile(uri);
            textData = new util_1.TextDecoder().decode(data);
        }
        catch (e) {
            console.log('Unable to read text file', e);
            LoggerManager_1.getLogger().error('Unable to read text file', e);
        }
        profileDone();
        return textData;
    }
    async writeTextFile(path, str) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`VSCodeFileSystem.writeTextFile ${path}`);
        try {
            path = this.path(path);
            const uri = vscode_1.default.Uri.file(path);
            await vscode_1.default.workspace.fs.writeFile(uri, new util_1.TextEncoder().encode(str));
        }
        catch (e) {
            console.log('Unable to write text file', e);
            LoggerManager_1.getLogger().error('Unable to write text file', e);
        }
        profileDone();
    }
    async getEntityNames(type) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`VSCodeFileSystem.getEntityNames - ${this.path}`);
        const path = this.path(this.path());
        const uri = vscode_1.default.Uri.file(path);
        const entities = await vscode_1.default.workspace.fs.readDirectory(uri);
        const filteredEntities = lodash_1.default.filter(entities, entity => entity[1] === type);
        const entityNames = filteredEntities.map(filteredEntity => filteredEntity[0]);
        profileDone();
        return entityNames;
    }
    readDirectories() {
        return this.getEntityNames(vscode_1.default.FileType.Directory);
    }
    async readFiles({ ext }) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`VSCodeFileSystem.readFiles - ${this.path} - ext ${ext}`);
        const fileNames = await this.getEntityNames(vscode_1.default.FileType.File);
        let files = fileNames;
        if (ext) {
            const extWithDot = `.${ext}`;
            files = lodash_1.default.filter(fileNames, fileName => {
                return fileName.endsWith(extWithDot);
            });
        }
        profileDone();
        return files;
    }
    async rm(path, options) {
        const profileDone = LoggerManager_1.getLogger().profileOperation(`VSCodeFileSystem.tm ${path}`);
        try {
            path = this.path(path);
            const uri = vscode_1.default.Uri.file(path);
            await vscode_1.default.workspace.fs.delete(uri, options);
        }
        catch (e) {
            console.log(`Unable to remove ${path}`, e);
            LoggerManager_1.getLogger().error(`Unable to remove ${path}`, e);
        }
        profileDone();
    }
}
exports.VSCodeFileSystem = VSCodeFileSystem;
//# sourceMappingURL=VSCodeFileSystem.js.map