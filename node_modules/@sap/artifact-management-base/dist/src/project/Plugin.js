"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin = exports.ServiceCatalog = exports.MtaModuleType = exports.ServiceType = exports.AuthenticationType = exports.DestinationType = void 0;
//https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/8aeea65eb9d64267b554f64a3db8a349.html
var DestinationType;
(function (DestinationType) {
    DestinationType[DestinationType["DEST_TO_SERVICE_INSTANCE"] = 0] = "DEST_TO_SERVICE_INSTANCE";
    DestinationType[DestinationType["DEST_TO_RESOURCE_BEHIND_XSUAA"] = 1] = "DEST_TO_RESOURCE_BEHIND_XSUAA";
    DestinationType[DestinationType["DEST_TO_SERVICE_INSTANCE_NO_CLOUD"] = 2] = "DEST_TO_SERVICE_INSTANCE_NO_CLOUD";
})(DestinationType = exports.DestinationType || (exports.DestinationType = {}));
;
var AuthenticationType;
(function (AuthenticationType) {
    AuthenticationType["OAuth2UserTokenExchange"] = "OAuth2UserTokenExchange";
    AuthenticationType["OAuth2JWTBearer"] = "OAuth2JWTBearer";
})(AuthenticationType = exports.AuthenticationType || (exports.AuthenticationType = {}));
;
var ServiceType;
(function (ServiceType) {
    ServiceType["CF_MANAGED_SERVICE"] = "org.cloudfoundry.managed-service";
    ServiceType["CAP_SERVICE"] = "org.sap.capservice";
    ServiceType["CF_USER_PROVIDED_SERVICE"] = "org.cloudfoundry.user-provided-service";
})(ServiceType = exports.ServiceType || (exports.ServiceType = {}));
;
var MtaModuleType;
(function (MtaModuleType) {
    MtaModuleType["APPLICATION_CONTENT"] = "com.sap.application.content";
    MtaModuleType["HTML5"] = "html5";
})(MtaModuleType = exports.MtaModuleType || (exports.MtaModuleType = {}));
;
exports.ServiceCatalog = Object.freeze({
    xsuaa: {
        name: 'xsuaa',
        plan: 'application',
    },
    destination: {
        name: 'destination',
        plan: 'lite',
    },
    hana: {
        name: 'hana',
        plan: 'hdi-shared',
    },
    html5_apps_repo_host: {
        name: 'html5-apps-repo',
        plan: 'app-host',
    },
    html5_apps_repo_runtime: {
        name: 'html5-apps-repo',
        plan: 'app-runtime',
    },
    capservice: {
        name: 'capservice',
        plan: 'default',
    },
    document: {
        name: 'sdm',
        plan: 'standard',
    },
    metadata: {
        name: 'metadata',
        plan: 'standard',
    },
    connectivity: {
        name: 'connectivity',
        plan: 'lite',
    },
    personal_data_manager: {
        name: 'personal-data-manager-service',
        plan: 'standard',
    },
    logservice: {
        name: 'application-logs',
        plan: 'lite',
    },
});
class Plugin {
    getDependencies() {
        throw new Error('Method not implemented.');
    }
    getProjectReaders() {
        throw new Error('Method not implemented.');
    }
    getModuleReaders() {
        throw new Error('Method not implemented.');
    }
    getProjectManifestGenerators() {
        throw new Error('Method not implemented.');
    }
    getModuleManifestGenerators() {
        throw new Error('Method not implemented.');
    }
    getProjectRunner() {
        throw new Error('Method not implemented.');
    }
    getModuleRunner() {
        throw new Error('Method not implemented.');
    }
    getModuleBuilder() {
        throw new Error('Method not implemented.');
    }
}
exports.Plugin = Plugin;
//# sourceMappingURL=Plugin.js.map