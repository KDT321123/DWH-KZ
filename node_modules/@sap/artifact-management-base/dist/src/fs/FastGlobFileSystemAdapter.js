"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class FastGlobFileSystemAdapter {
    constructor(allowFilter) {
        /** fs.readdir( path, options, callback )
         ** path: It holds the path of the directory from where the contents have to be read. It can be a String, Buffer or URL.
         ** options: It is an object that can be used to specify optional parameters that will affect the method. It has two optional parameters:
         **     encoding: It is a string value which specifies which encoding would be used for the filenames given to the callback argument. The default value is ‘utf8’.
         **     withFileTypes: It is a boolean value which specifies whether the files would be returned as fs.Dirent objects. The default value is ‘false’.
         ** callback: It is the function that would be called when the method is executed.
         **     err: It is an error that would be thrown if the operation fails.
         **     files: It is an array of String, Buffer or fs.Dirent objects that contain the files in the directory.
         */
        this.readdir = (path, param1, param2) => {
            let callback;
            let options;
            if (typeof param1 === 'function') {
                options = {};
                callback = param1;
            }
            else if (typeof param2 === 'function') {
                options = param1;
                callback = param2;
            }
            else {
                throw new Error('Missing callback');
            }
            // @ts-ignore
            return fs_1.default.readdir(path, options, (err, files) => {
                if (err) {
                    callback(err);
                }
                else {
                    const filteredFiles = files.filter(file => allowFilter(path_1.default.join(path, file.name), file.isDirectory()));
                    callback(null, filteredFiles);
                }
            });
        };
    }
}
exports.default = FastGlobFileSystemAdapter;
//# sourceMappingURL=FastGlobFileSystemAdapter.js.map