"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * API to create names for Cloud Platform artifacts to apply a common namespace prefix and avoid naming collisions.
 *
 * Use the specific functions for your use case.
 */
class NameFactory {
    constructor(prefix) {
        this.prefixStr = prefix;
    }
    static getInstance(prefix) {
        if (!this.nameFactories.has(prefix)) {
            this.nameFactories.set(prefix, new NameFactory(prefix));
        }
        return this.nameFactories.get(prefix);
    }
    destinationToApp(applicationName) {
        return this.prefix('app', applicationName);
    }
    destinationToService(prefixedServiceInstanceName) {
        return this.prefix('service', this.unprefix(prefixedServiceInstanceName));
    }
    serviceInstanceName(serviceName, planName) {
        if (planName) {
            return this.prefix(serviceName, planName);
        }
        else {
            return this.prefix(serviceName);
        }
    }
    serviceResourceName(serviceInstanceName) {
        return this.prefix('service', this.unprefix(serviceInstanceName));
    }
    moduleName(moduleName) {
        return this.prefix(moduleName);
    }
    auxModuleName(moduleName) {
        return this.prefix('aux', moduleName);
    }
    moduleProvidesName(moduleName, providesName) {
        return this.prefix('provides', this.unprefix(moduleName), providesName);
    }
    moduleResourceName(serviceName) {
        return this.prefix('resource', serviceName);
    }
    prefix(...parts) {
        return `${this.prefixStr}${parts.join('-')}`;
    }
    getPrefix() {
        return this.prefixStr;
    }
    unprefix(str) {
        if (!str.startsWith(this.prefixStr))
            throw new Error(`"${str}" is expected to start with prefix "${this.prefixStr}"`);
        return str.substr(this.prefixStr.length);
    }
}
exports.default = NameFactory;
NameFactory.nameFactories = new Map();
//# sourceMappingURL=NameFactory.js.map