import FastGlobFileSystemAdapter, { FileFilterFunction } from '../fs/FastGlobFileSystemAdapter';
export declare type GlobOptions = {
    onlyFiles?: boolean;
    ignore?: [string];
    onlyDirectories?: boolean;
    cwd?: string;
};
export default class ProjectFileSystem {
    basePath: string;
    rootPath: string;
    globFilteringFileSystemAdapter?: FastGlobFileSystemAdapter;
    filterFunction: FileFilterFunction | undefined;
    constructor(basePath: string, rootPath?: string);
    path(...paths: string[]): string;
    relativeToRoot(...paths: string[]): string;
    relativeToRootFromAbsolutePath(...paths: string[]): string;
    readYaml(path: string): Promise<any>;
    getNewInstance(basePath: string, rootPath?: string): ProjectFileSystem;
    readJson(path: string): Promise<any>;
    writeJSON(path: string, obj: any): Promise<void>;
    renderYamlTemplate(path: string, data: object): Promise<any>;
    renderTemplate(path: string, data: object): Promise<string>;
    readFilesBFS({ ext }?: {
        ext?: string;
    }): Promise<string[]>;
    isContained(path: string): boolean;
    makeAbsolute(path: string): string;
    getName(path: string, extension?: string): string;
    glob(pattern: string, options: GlobOptions): Promise<string[]>;
    gitIgnoreFileFilter(): Promise<FileFilterFunction>;
    deleteGlobFilter(): void;
    navigate(...paths: string[]): ProjectFileSystem;
    stat(path: string): Promise<any>;
    fileExists(path: string): Promise<boolean>;
    directoryExists(path: string): Promise<boolean>;
    mkdir(path?: string, options?: {
        recursive: boolean;
    }): Promise<void>;
    readTextFile(path: string, absolutePath?: boolean): Promise<string>;
    writeTextFile(path: string, str: string): Promise<void>;
    readDirectories(): Promise<string[]>;
    readFiles({ ext }?: {
        ext?: string;
    }): Promise<string[]>;
    rm(path: string, options?: {
        recursive: boolean;
    }): Promise<void>;
}
