"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
class MdkModuleGenerator {
    constructor() {
        this.genericDocumentAdded = false;
    }
    getType() {
        return artifact_management_base_1.ModuleType.MDK;
    }
    async provideResources(context) {
        let hasGenericDocument = false;
        try {
            const result = await artifact_management_base_1.Util.exec({ cwd: context.fs().path(), shell: true, stdio: 'pipe' }, 'mdk check --target doc');
            if (result && result.stdout === 'true\n') {
                hasGenericDocument = true;
            }
        }
        catch (e) {
            artifact_management_base_1.getLogger().error('Failed to check mdk project with error:', e);
        }
        if (hasGenericDocument && !this.genericDocumentAdded) {
            this.genericDocumentAdded = true;
            return [{
                    service: artifact_management_base_1.ServiceCatalog.document.name,
                    plan: artifact_management_base_1.ServiceCatalog.document.plan,
                    name: `${context.nameFactory.serviceInstanceName('sdm')}`,
                    type: artifact_management_base_1.ServiceType.CF_MANAGED_SERVICE,
                    createDestination: true,
                    config: {
                        destination: {
                            type: artifact_management_base_1.DestinationType.DEST_TO_SERVICE_INSTANCE_NO_CLOUD,
                        },
                    },
                }];
        }
        else {
            return [];
        }
    }
    async beforeBuildCommands() {
        return [];
    }
    async getModuleManifest(context) {
        var _a, _b;
        const zipName = `${(_a = context.module) === null || _a === void 0 ? void 0 : _a.name}.zip`;
        return {
            name: context.nameFactory.moduleName((_b = context.module) === null || _b === void 0 ? void 0 : _b.name),
            type: artifact_management_base_1.MtaModuleType.HTML5,
            path: context.fs().relativeToRoot(),
            'build-parameters': {
                builder: 'custom',
                commands: [
                    'mdk build --target module --ui5 --forceUpdate',
                    'bash -c "cd Web/MDKModule && rm -rf .npmrc && npm install"',
                    'bash -c "cd Web/MDKModule && npm run build"',
                    `bash -c "mv Web/MDKModule/MDKModule-content.zip ../../build/dist/${zipName}"`,
                    'rm -rf Web/MDKModule/dist',
                ],
                _artifactName: zipName,
                'supported-platforms': [],
                'build-result': '../../build/dist',
            },
        };
    }
    requires() {
        return [];
    }
}
exports.default = MdkModuleGenerator;
//# sourceMappingURL=MdkModuleGenerator.js.map