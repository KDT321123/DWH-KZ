"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDK_SVC_PATTERNS = void 0;
const artifact_management_base_1 = require("@sap/artifact-management-base");
const MdkItemReader_1 = __importDefault(require("./MdkItemReader"));
const InfoList_1 = require("../InfoList");
exports.MDK_SVC_PATTERNS = ['**/*.service'];
class MdkServiceReader extends MdkItemReader_1.default {
    constructor() {
        super(...arguments);
        this.defaultType = artifact_management_base_1.ItemType.MDKService;
        this.types = [this.defaultType];
        this.tags = [artifact_management_base_1.Tag.Item, artifact_management_base_1.Tag.Service, artifact_management_base_1.Tag.MDK];
        this.patterns = exports.MDK_SVC_PATTERNS;
        this.matchConditions = { requiredFilePatterns: exports.MDK_SVC_PATTERNS };
    }
    async itemParser(svc, idx) {
        if (!this.readUtils) {
            throw new Error(this.E_INVAL_INVO);
        }
        const [file, type] = this.getFileAndType(idx);
        const path = this.readUtils.fs.relativeToRoot(file);
        const name = svc ? (svc.DestinationName || svc.ServiceUrl) : undefined;
        const ref = svc ? (svc.ServiceUrl || svc.DestinationName) : undefined;
        const item = { type, ref, name, path, tags: this.tags };
        if (!svc || (!svc.ServiceUrl && !svc.DestinationName)) {
            const info = new artifact_management_base_1.Info();
            if (!svc) {
                info.add(InfoList_1.InfoList.ERR_CORRUPT_FILE);
            }
            else {
                info.add(InfoList_1.InfoList.ERR_SERVICE_URL_DESTINATION_NAME_UNDEFINED).getStateMessages();
            }
            item.info = info.getStateMessages();
        }
        return item;
    }
}
exports.default = MdkServiceReader;
//# sourceMappingURL=MdkServiceReader.js.map