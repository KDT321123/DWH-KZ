"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
const MdkPageReader_1 = __importDefault(require("./MdkPageReader"));
const MdkServiceReader_1 = __importDefault(require("./MdkServiceReader"));
const MdkApplicationReader_1 = __importDefault(require("./MdkApplicationReader"));
const MdkGlobalReader_1 = __importDefault(require("./MdkGlobalReader"));
const MdkActionReader_1 = __importDefault(require("./MdkActionReader"));
const MdkRuleReader_1 = __importDefault(require("./MdkRuleReader"));
const MdkStyleReader_1 = __importDefault(require("./MdkStyleReader"));
const MdkI18nReader_1 = __importDefault(require("./MdkI18nReader"));
const MdkImageReader_1 = __importDefault(require("./MdkImageReader"));
const MDKTaskUIReader_1 = __importDefault(require("./MDKTaskUIReader"));
const InfoList_1 = require("../InfoList");
class MdkModuleReader extends artifact_management_base_1.ModuleReader {
    constructor() {
        super(...arguments);
        this.matchConditions = {
            requiredFilePatterns: ['Application.app'],
        };
        this.itemReaders = [
            new MdkRuleReader_1.default,
            new MdkI18nReader_1.default,
            new MdkImageReader_1.default,
            new MdkStyleReader_1.default,
            new MdkPageReader_1.default,
            new MdkServiceReader_1.default,
            new MdkGlobalReader_1.default,
            new MdkActionReader_1.default,
            new MdkApplicationReader_1.default,
            new MDKTaskUIReader_1.default,
        ];
        this.tags = [artifact_management_base_1.Tag.Module, artifact_management_base_1.Tag.MDK];
    }
    getType() {
        return artifact_management_base_1.ModuleType.MDK;
    }
    getDetectionMechanism() {
        return artifact_management_base_1.DetectionMechanism.FILE_PATTERN;
    }
    async read({ fs }) {
        const app = await fs.readJson('Application.app');
        const mdkTags = Object.assign([], this.tags);
        const projectJson = await fs.readJson('.project.json');
        if (projectJson && projectJson.LCAP && projectJson.LCAP.UserTask) {
            mdkTags.push(artifact_management_base_1.Tag.TaskUI);
        }
        const module = {
            type: artifact_management_base_1.ModuleType.MDK,
            name: app._Name,
            path: fs.relativeToRoot(),
            tags: mdkTags,
        };
        if (!app._Name) {
            module.info = { 'errors': [InfoList_1.InfoList.ERR_APPLICATION_NAME_UNDEFINED] };
        }
        return module;
    }
}
exports.default = MdkModuleReader;
//# sourceMappingURL=MdkModuleReader.js.map