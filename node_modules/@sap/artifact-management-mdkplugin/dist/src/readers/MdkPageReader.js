"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDK_PAGE_PATTERNS = void 0;
const artifact_management_base_1 = require("@sap/artifact-management-base");
const MdkItemReader_1 = __importDefault(require("./MdkItemReader"));
const InfoList_1 = require("../InfoList");
exports.MDK_PAGE_PATTERNS = ['**/*.page'];
class MdkPageReader extends MdkItemReader_1.default {
    constructor() {
        super(...arguments);
        this.defaultType = artifact_management_base_1.ItemType.MDKPage;
        this.types = [this.defaultType];
        this.tags = [artifact_management_base_1.Tag.Item, artifact_management_base_1.Tag.Page, artifact_management_base_1.Tag.UI, artifact_management_base_1.Tag.MDK];
        this.matchConditions = { requiredFilePatterns: exports.MDK_PAGE_PATTERNS };
    }
    async itemParser(page, idx) {
        if (!this.readUtils) {
            throw new Error(this.E_INVAL_INVO);
        }
        const [file, type] = this.getFileAndType(idx);
        const path = this.readUtils.fs.relativeToRoot(file);
        const name = (page ? page._Name : undefined) || this.pathToName(file);
        const item = { type, ref: path, name, path, tags: this.tags };
        if (!page) {
            item.info = { 'errors': [InfoList_1.InfoList.ERR_CORRUPT_FILE] };
        }
        ;
        return item;
    }
}
exports.default = MdkPageReader;
//# sourceMappingURL=MdkPageReader.js.map