"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
const path_1 = __importDefault(require("path"));
class MdkServiceBuild extends artifact_management_base_1.ModuleAutoBuilder {
    getType() {
        return artifact_management_base_1.ModuleType.MDK;
    }
    patterns() {
        return ['db/{*.cds,*.csn,external/*.cds,external/*.csn}', 'srv/{*.cds,*.csn,external/*.cds,external/*.csn}'];
    }
    async runInitial(fs, project) {
        await this.rebuild(fs, project);
    }
    async runUpdate(fs, project) {
        artifact_management_base_1.getLogger().info('Initiating to rebuild EDMX files now.....');
        await this.rebuild(fs, project);
    }
    async rebuild(fs, project) {
        // @todo: Project API should be changed to use caching to improve performance
        const mdkServices = await project.readItems({ types: [artifact_management_base_1.ItemType.MDKService] });
        artifact_management_base_1.getLogger().debug(`MDK Services returned from Read Items Call -  ${JSON.stringify(mdkServices)}`);
        if (mdkServices.length === 0)
            return;
        const capMap = {};
        const capServices = await project.readItems({ types: [artifact_management_base_1.ItemType.CAPService] });
        artifact_management_base_1.getLogger().debug(`CAP Services returned from Read Items Call -  ${JSON.stringify(capServices)}`);
        for (const capService of capServices) {
            capMap[capService.name] = capService;
        }
        for (const mdkService of mdkServices) {
            try {
                const dirname = path_1.default.dirname(mdkService.path);
                const basename = path_1.default.basename(mdkService.path, '.service');
                const edmxPath = path_1.default.join(dirname, '.' + basename + '.xml');
                const oldEdmx = await fs.readTextFile(edmxPath);
                const match = oldEdmx.match(/<Schema\s*Namespace="([^"]+)"/);
                if (!match)
                    continue;
                const serviceName = match[1];
                artifact_management_base_1.getLogger().info(`Updating edmx file for MDK service "${mdkService.name}" ("${edmxPath}") from CAP service "${serviceName}"`);
                const capService = capMap[serviceName];
                const capApi = new artifact_management_base_1.CapApi(fs, [capService.path]);
                const edmx = await capApi.edmx(serviceName);
                await fs.writeTextFile(edmxPath, edmx);
            }
            catch (error) {
                artifact_management_base_1.getLogger().error(`Failed to update MDK service "${mdkService.name}".`, error);
            }
        }
    }
}
exports.default = MdkServiceBuild;
//# sourceMappingURL=MdkServiceBuild.js.map