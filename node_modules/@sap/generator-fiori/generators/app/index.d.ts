import Generator from 'yeoman-generator';
import type { LogLevel, IVSCodeExtLogger } from '@vscode-logging/logger';
import type { IPrompt as YeomanUiStep, Prompts as YeomanUiSteps } from '@sap-devx/yeoman-ui-types';
import type { YeomanUiStepConfig, ILogWrapper } from '@sap/ux-generator-common';
import { State, ODataVersion, PROJECT_TYPE, Template, FloorplanFE, TableType, TableSelectionMode, GeneratorName } from '@sap/ux-generator-common';
export default class Fiori extends Generator {
    prompts: YeomanUiSteps;
    yeomanUiStepConfig: YeomanUiStepConfig;
    private fioriSteps;
    setPromptsCallback: (fn: any) => void;
    private state;
    private floorplans;
    constructor(args: string | string[], opts: Generator.GeneratorOptions);
    /**
     * Configures the vscode logger and yeoman logger to share single wrapper.
     * Set as an option to be passed to sub-gens.
     */
    _configureLogging(logLevel: LogLevel, vscLogger: IVSCodeExtLogger, vscode?: any): ILogWrapper;
    _setPrompts(steps: YeomanUiStep[]): void;
    prompting(): Promise<void>;
    /**
     * Determine if we should inject other generators based on the environment or options.
     *
     */
    initializing(): Promise<void>;
    install(): void;
}
export { State, PROJECT_TYPE, Template, ODataVersion, TableType, FloorplanFE, TableSelectionMode, GeneratorName };
//# sourceMappingURL=index.d.ts.map