'use strict';

// Dependencies.
var fs = require( 'fs' );
const optionalRequire = require( 'optional-require' )( require );


/**
 * FeatureToggleInstance is a class which allows you to set
 *
 */
module.exports = class FeatureToggleInstance{

    /**
	 * Create a FeatureToggleInstance (with extension Name - can be empty if no VsCode commands are used).
	 *
	 * @param {string} featureListLocation
	 * @param {string} extensionName (optional)
     * @param {} vscode - the vscode API. If none is provided this library will check if vscode is available and populate it itself.
     * If no vscode is found vscode related functionalities can not be used. (optional)
	 */
    constructor( featureListLocation, extensionName, vscode ){

        var rawdata = '';

        // Read FeatureList of Extension
        rawdata = fs.readFileSync( featureListLocation );

        this._extensionName = extensionName ? extensionName : '';
        this._featureListLocation = featureListLocation;
        this._features = JSON.parse( rawdata ).features;
        this._vscode = vscode || optionalRequire( 'vscode', true );
    }

    /**
	 * Check if the feature 'featureToggleName' is enabled by the extension itself. If not check if it is enabled by QA Extension.
	 *
	 * @param {string} featureToggleName
	 * @returns {Boolean}
	 */
    isFeatureEnabled( featureToggleName ){
        if( this._checkFeature( featureToggleName ) ){
            return true;
        } else {
            return this._isFeatureQaEnabled( featureToggleName );
        }
    }

    /**
     * Check if the command 'featureToggleName' is enabled by the extension itself. If not check if it is enabled by QA Extension.
     * Additionally this function will set the 'extensionName:featureToggleName' context variable of vscode which can be used to hide or
     * show the command.
     *
     * Note: Function only useable in VSCODE Extension contexts when relating to commands. Use 'isFeatureEnabled' if you don't have a command.
     *
     * @param {string} featureToggleName
     * @returns {Boolean}
     */
    isCommandEnabled( featureToggleName ){
        if( this._checkFeature( featureToggleName ) ){
            if( this._vscode && this._vscode.commands ){
                // This sets the command visible inside the extension.
                this._vscode.commands.executeCommand( 'setContext', `${this._extensionName}:${featureToggleName}`, true );
            }
            return true;
        } else {
            if( this._isFeatureQaEnabled( featureToggleName ) ){
                if( this._vscode && this._vscode.commands ){
                    // This sets the command visible inside the extension.
                    this._vscode.commands.executeCommand( 'setContext', `${this._extensionName}:${featureToggleName}`, true );
                }
                return true;
            } else {
                return false;
            }
        }
    }

    /**
     * Check if the feature 'featureToggleName' is enabled from the "hana-tooling-feature-toggles" extension.
     *
     * @param {string} featureToggleName
     * @returns {Boolean} The config value of the FeatureToggle Extension or false if outside of vscode.
     */
    _isFeatureQaEnabled( featureToggleName ){
        if( this._vscode && this._vscode.extensions ){

            let qaExtension = this._vscode.extensions.getExtension( 'sap.hana-tooling-feature-toggles' );

            if( qaExtension ){
                let qaApi = qaExtension.exports;

                return qaApi.isFeatureEnabled( featureToggleName, this._features );
            }
        }

        return false;
    }

    // Used by isFeatureEnabled and isCommandEnabled to check the toggles.
    _checkFeature( featureToggleName ){

        var featureDescribed = false;
        var enabled = false;

        for( let feature of this._features ) {
            if( feature.name === featureToggleName ) {
                featureDescribed = true;
                if( feature.status === 'released' ){
                    enabled = true;
                    break;
                }
            }
        }

        if( enabled ){
            return true;
        } else {
            if( !featureDescribed ){
                // feature is missing in .json file. Tell developer to add it.
                console.log( `Feature "${featureToggleName}" is not handled inside your feature toggle list: "
                                ${this._featureListLocation}", please add the respective entry.` );
            }
            return false;
        }
    }
};
