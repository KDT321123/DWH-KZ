"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const axios_1 = __importDefault(require("axios"));
const axios_mock_adapter_1 = __importDefault(require("axios-mock-adapter"));
const bas_sdk_sinon_helper_1 = require("@sap/bas-sdk-sinon-helper");
const get_devspace_1 = require("../../src/apis/get-devspace");
const getMockResponse = () => ({
    devSpaceOriginLabel: "dev_space_origin_label",
    config: {
        id: "ws-anyw",
        username: "mail@me.net",
        labels: {
            controllerID: "workspace-controller-1-23456789-987654",
            "workspace.devx.sap.com/persistence-pvc": "true",
            "ws-manager.devx.sap.com/deleted": "false",
            "ws-manager.devx.sap.com/displayname": "dev_space_name",
            "ws-manager.devx.sap.com/origin": "0a1b2c3d4e5f6a7b8c9d0e1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e ",
            "ws-manager.devx.sap.com/providerTenantId": "0a1b2c3d-1a2b-9876-a1b2-9f8e7d6c5b4a",
            "ws-manager.devx.sap.com/username": "a1b2c3d4e5f6a7b8c9d0e1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8",
            "ws-manager.devx.sap.com/zoneid": "98765432-abcd-1234-fedc-01234567890a",
            "ws-manager.devx.sap.com/LCAP": "LCAP",
        },
        annotations: {
            optionalExtensions: "[]",
            pack: "Basic",
            packTagline: "Basic Tag Line",
            technicalExtensions: "['one/one','two/two','and-three/and-three']",
            "workspace.devx.sap.com/lastOnlineTime": "2022-09-02T17:03:20Z",
            "workspace.devx.sap.com/ownerFullName": "First Last",
            "workspace.devx.sap.com/plan": "standard-edition",
            "workspace.devx.sap.com/ws-controller-processed-gen": "22",
            "ws-manager.devx.sap.com/startedAt": "2022-09-02T17:02:34Z",
        },
        creationtimestamp: "2022-09-02T17:02:34Z",
        encrypted: true,
    },
    runtime: {
        status: "RUNNING",
        url: {
            startup: "https://startup.host/",
            theia: "https://theia.host/",
        },
        baseUrl: "https://any.host/",
        statusLastUpdateTime: "2022-09-02T17:33:01Z",
        statusLastUpdateGeneration: 12,
        backendReadiness: [
            { name: "brOne", readiness: false },
            { name: "brTwo", readiness: true },
        ],
    },
    diskusage: {
        used: 111111,
        free: 2222222,
        iused: 33333,
        ifree: 444444,
        timestamp: "2022-09-02T17:33:00.993856769Z",
    },
});
describe("Test for getWorkspaceInfo()", () => {
    let mockAxios;
    before(() => {
        mockAxios = new axios_mock_adapter_1.default(axios_1.default);
    });
    after(() => {
        mockAxios.restore();
    });
    it("Should return devspace info", async () => {
        // Mock setup
        bas_sdk_sinon_helper_1.stubEnv({
            H2O_URL: "http://any.host.net",
            WORKSPACE_ID: "workspaces-ws-anyw",
        });
        mockAxios
            .onGet("http://any.host.net/ws-manager/api/v1/workspace/ws-anyw")
            .reply(200, getMockResponse());
        // Test execution
        const devspaceInfo = await get_devspace_1.getDevspaceInfo();
        // Results check
        chai_1.expect(devspaceInfo).to.deep.equal({
            devspaceDisplayName: "dev_space_name",
            devspaceOrigin: "dev_space_origin_label",
            pack: "Basic",
            packDisplayName: "Basic Tag Line",
        });
    });
    it("Should return devspace info, origin name from 'ws-manager.devx.sap.com/LCAP'", async () => {
        // Mock setup
        bas_sdk_sinon_helper_1.stubEnv({
            H2O_URL: "http://any.host.net",
            WORKSPACE_ID: "workspaces-ws-anyw",
        });
        const mockResponse = getMockResponse();
        delete mockResponse.devSpaceOriginLabel;
        mockAxios
            .onGet("http://any.host.net/ws-manager/api/v1/workspace/ws-anyw")
            .reply(200, mockResponse);
        // Test execution
        const devspaceInfo = await get_devspace_1.getDevspaceInfo();
        // Results check
        chai_1.expect(devspaceInfo).to.deep.equal({
            devspaceDisplayName: "dev_space_name",
            devspaceOrigin: "LCAP",
            pack: "Basic",
            packDisplayName: "Basic Tag Line",
        });
    });
    it("Should throw an error if HTTP call throws an error with details", async () => {
        // Mock setup
        bas_sdk_sinon_helper_1.stubEnv({
            H2O_URL: "http://any.host.net",
            WORKSPACE_ID: "workspaces-ws-anyw",
        });
        mockAxios
            .onGet("http://any.host.net/ws-manager/api/v1/workspace/ws-anyw")
            .networkError();
        try {
            // Test execution
            await get_devspace_1.getDevspaceInfo();
            chai_1.expect.fail("Call to function getDevspaceInfo() should have thrown error but did not.");
        }
        catch (error) {
            // Results check
            chai_1.expect(error === null || error === void 0 ? void 0 : error.toString().toLowerCase()).to.contain("network");
        }
    });
    it("Should throw an error if HTTP call throws an error without further details", async () => {
        // Mock setup
        bas_sdk_sinon_helper_1.stubEnv({
            H2O_URL: "http://any.host.net",
            WORKSPACE_ID: "workspaces-ws-anyw",
        });
        mockAxios
            .onGet("http://any.host.net/ws-manager/api/v1/workspace/ws-anyw")
            .reply(() => {
            throw "Error";
        });
        try {
            // Test execution
            await get_devspace_1.getDevspaceInfo();
            chai_1.expect.fail("Call to function getDevspaceInfo() should have thrown error but did not.");
        }
        catch (error) {
            // Results check
            chai_1.expect(error === null || error === void 0 ? void 0 : error.toString()).to.contain("ws-anyw");
        }
    });
});
//# sourceMappingURL=get-devspace.spec.js.map