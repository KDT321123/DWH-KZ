"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const devspace_utils_1 = require("../../src/utils/devspace-utils");
describe("Test for flattenDevspaceInfo()", () => {
    it("should return devspace info API results", () => {
        // Mock setup
        const mockApiResults = {
            config: {
                annotations: { pack: "PACK", packTagline: "PACK_TAG_LINE" },
                labels: { "ws-manager.devx.sap.com/displayname": "DISPLAY_NAME" },
            },
            devSpaceOriginLabel: "ORIGIN_LABEL",
        };
        // Test execution
        const flattenResult = devspace_utils_1.flattenDevspaceInfo(mockApiResults);
        // Results check
        chai_1.expect(flattenResult).to.deep.equal({
            devspaceDisplayName: "DISPLAY_NAME",
            devspaceOrigin: "ORIGIN_LABEL",
            pack: "PACK",
            packDisplayName: "PACK_TAG_LINE",
        });
    });
    it("should return devspace info even for empty API results", () => {
        // Mock setup
        const mockApiResults = {};
        // Test execution
        const flattenResult = devspace_utils_1.flattenDevspaceInfo(mockApiResults);
        // Test execution
        chai_1.expect(flattenResult).to.deep.equal({
            devspaceDisplayName: "",
            devspaceOrigin: "",
            pack: "",
            packDisplayName: "",
        });
    });
    it("should return devspace info even for null API results", () => {
        // Mock setup
        const mockApiResults = null;
        // Test execution
        const flattenResult = devspace_utils_1.flattenDevspaceInfo(mockApiResults);
        // Test execution
        chai_1.expect(flattenResult).to.deep.equal({
            devspaceDisplayName: "",
            devspaceOrigin: "",
            pack: "",
            packDisplayName: "",
        });
    });
});
//# sourceMappingURL=devsapce-utils.spec.js.map