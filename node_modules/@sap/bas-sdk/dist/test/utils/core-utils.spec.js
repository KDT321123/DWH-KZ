"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon_1 = __importDefault(require("sinon"));
const bas_sdk_sinon_helper_1 = require("@sap/bas-sdk-sinon-helper");
const core_utils_1 = require("../../src/utils/core-utils");
describe("index-core-utils", () => {
    const WS_BASE_URL = "WS-BASE-VALUE";
    afterEach(() => {
        sinon_1.default.restore();
    });
    describe("isAppStudio", () => {
        it("return true when WS_BASE_URL is defined", () => {
            bas_sdk_sinon_helper_1.stubEnv({ WS_BASE_URL: WS_BASE_URL });
            chai_1.expect(core_utils_1.isAppStudio()).equals(true);
        });
        it("return false when WS_BASE_URL is empty", () => {
            bas_sdk_sinon_helper_1.stubEnv({ WS_BASE_URL: "" });
            chai_1.expect(core_utils_1.isAppStudio()).equals(false);
        });
        it("return false when WS_BASE_URL is not defined", () => {
            chai_1.expect(core_utils_1.isAppStudio()).equals(false);
        });
    });
    describe("validDevPlatform()", () => {
        it("succ when the devplatform is Buisness Application Studio", () => {
            bas_sdk_sinon_helper_1.stubEnv({ WS_BASE_URL: WS_BASE_URL });
            core_utils_1.validDevPlatform("mynamespace.myFunction");
        });
        it("failed when the dev-platform is not Buisness Application Studio", () => {
            chai_1.expect(() => {
                core_utils_1.validDevPlatform("mynamespace.myFunction");
            }).to.throw(Error, `The 'mynamespace.myFunction' API is supported only in Buisness Application Studio environment`);
        });
    });
    describe("getEnvValue()", () => {
        it("return the environment varaiable value for the given name", () => {
            bas_sdk_sinon_helper_1.stubEnv({ WS_BASE_URL: WS_BASE_URL });
            chai_1.expect(core_utils_1.getEnvValue("WS_BASE_URL")).equals(WS_BASE_URL);
        });
        it("throw exception when the environment varaiable not defined", () => {
            chai_1.expect(() => {
                core_utils_1.getEnvValue("_ENV_DUMMY_");
            }).to.throw(Error, `The _ENV_DUMMY_ environment variable is missing.`);
        });
    });
});
//# sourceMappingURL=core-utils.spec.js.map