"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.devspaceApiFactory = void 0;
const ws_1 = require("ws");
/**
 * Implement the devspace API internally. Expose only the API via the DevspaceApi
 */
class DevspaceApi {
    constructor(devspaceUrl) {
        this.connectionOpen = false;
        this.devspaceUrl = devspaceUrl;
        this.output = "";
        this.prompt = "";
    }
    async connect(jwt) {
        const ret = new Promise((resolve, reject) => {
            const options = {
                headers: { Authorization: `Bearer ${jwt}` },
            };
            this.ws = new ws_1.WebSocket(this.devspaceUrl, options);
            this.ws.on("open", () => {
                this.connectionOpen = true;
                resolve();
            });
            this.ws.on("message", (data) => {
                const value = data.toString();
                // connection can be closed by server side - notify the client
                if (value === "bye!") {
                    this.callback(`${this.output} - connection interrupted...`);
                }
                // eslint-disable-next-line no-control-regex -- its a pty terminal's hint symbol pattern
                if (/(\$ \[6n)$/g.test(value)) {
                    if (this.prompt) {
                        this.callback(this.output);
                        this.output = ""; // clear output buffer
                    }
                    else {
                        // immediately after a connection is established, the terminal first returns a hint character
                        this.prompt = value;
                    }
                }
                else {
                    this.output = this.output.concat(value);
                }
            });
            this.ws.on("error", (error) => {
                reject(error);
            });
            this.ws.on("close", (code, reason) => {
                this.connectionOpen = false;
                console.log(`connection closed ${code}, ${reason}`);
            });
        });
        return ret;
    }
    execute(command, ...args) {
        if (this.connectionOpen) {
            const exec = command.concat(" ", ...args.join(" "), "\n");
            this.ws.send(exec);
        }
    }
    onMessage(v) {
        this.callback = v;
    }
    disconnect() {
        if (this.connectionOpen) {
            this.ws.close();
        }
    }
}
function devspaceApiFactory(devspaceUrl) {
    return new DevspaceApi(devspaceUrl);
}
exports.devspaceApiFactory = devspaceApiFactory;
//# sourceMappingURL=devspace-api-factory.js.map