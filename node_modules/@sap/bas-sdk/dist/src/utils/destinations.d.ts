/// <reference types="node" />
import { URL } from "url";
export declare const ENV_H2O_URL = "H2O_URL";
/**
 * Represents the destination type.
 */
export declare type DestinationType = "HTTP";
/**
 * Represents the proxy types supported by the Connectivity service.
 */
export declare type ProxyType = "Internet" | "OnPremise";
/**
 * Represents the different authentication types for access control.
 */
export declare type AuthenticationType = "NoAuthentication" | "BasicAuthentication" | "OAuth2ClientCredentials";
export interface FlatDestination {
    Name: string;
    Type: string;
    Authentication: string;
    ProxyType: string;
    Description?: string;
    WebIDEEnabled: string;
    "HTML5.DynamicDestination"?: string;
    "sap-client"?: string;
    WebIDEUsage?: string;
    WebIDEAdditionalData?: string;
    "product.name"?: string;
    User?: string;
    Password?: string;
    "URL.headers.ApiKey"?: string;
    applicationID?: string;
    apiBusinessHubEnterpriseURL?: string;
}
export interface ResponseDestination extends FlatDestination {
    Host: string;
}
export interface AnswerDestination extends FlatDestination {
    URL: string;
}
export interface BasicAuthentication {
    userName: string;
    userPassword: string;
}
export interface Credentials {
    authentication: AuthenticationType;
    basicAuthentication?: BasicAuthentication;
}
export interface BASProperties {
    usage?: string;
    additionalData?: string;
    sapClient?: string;
    productName?: string;
    apiKey?: string;
    applicationID?: string;
    apiBusinessHubEnterpriseURL?: string;
    html5DynamicDestination?: string;
}
export interface DestinationBaseInfo {
    name: string;
    type: DestinationType;
    credentials: Credentials;
    proxyType: ProxyType;
    description?: string;
    basProperties?: BASProperties;
}
export interface DestinationListInfo extends DestinationBaseInfo {
    host: string;
}
export interface DestinationInfo extends DestinationBaseInfo {
    url: URL;
}
export declare function strToDestinationType(typeName: string): DestinationType;
export declare function strToAuthenticationType(authenticationName: string): AuthenticationType;
export declare function strToProxyType(proxyTypeName: string): ProxyType;
export declare function strToBoolean(text: string): boolean;
export declare function destinationInfoToAnswerDestination(destinationInfo: DestinationInfo): AnswerDestination;
export declare function flatDestinationToDestinationBaseInfo(flatDestination: FlatDestination): DestinationBaseInfo;
export declare function responseDestinationToDestinationListInfo(responseDestination: ResponseDestination): DestinationListInfo;
export declare function getDestinationHeaders(): Record<string, string>;
