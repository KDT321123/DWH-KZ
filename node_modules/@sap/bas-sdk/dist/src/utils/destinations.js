"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDestinationHeaders = exports.responseDestinationToDestinationListInfo = exports.flatDestinationToDestinationBaseInfo = exports.destinationInfoToAnswerDestination = exports.strToBoolean = exports.strToProxyType = exports.strToAuthenticationType = exports.strToDestinationType = exports.ENV_H2O_URL = void 0;
const headers_helper_1 = require("../apis/headers-helper");
exports.ENV_H2O_URL = "H2O_URL";
function strToDestinationType(typeName) {
    const typeNameArr = ["HTTP"];
    const destinationType = typeNameArr.find((element) => element === typeName);
    if (!destinationType) {
        throw new Error(`unknown ${typeName} destination type`);
    }
    return destinationType;
}
exports.strToDestinationType = strToDestinationType;
function strToAuthenticationType(authenticationName) {
    const authenticationNameArr = [
        "NoAuthentication",
        "BasicAuthentication",
        "OAuth2ClientCredentials",
    ];
    const authenticationType = authenticationNameArr.find((element) => element === authenticationName);
    if (!authenticationType) {
        throw new Error(`unknown ${authenticationName} authentication type`);
    }
    return authenticationType;
}
exports.strToAuthenticationType = strToAuthenticationType;
function strToProxyType(proxyTypeName) {
    const proxyTypeNameArr = ["Internet", "OnPremise"];
    const proxyType = proxyTypeNameArr.find((element) => element === proxyTypeName);
    if (!proxyType) {
        throw new Error(`unknown ${proxyTypeName} proxy type`);
    }
    return proxyType;
}
exports.strToProxyType = strToProxyType;
function strToBoolean(text) {
    if (!text) {
        return false;
    }
    return text.toLocaleLowerCase() === "true";
}
exports.strToBoolean = strToBoolean;
function toCredentials(flatDestinations) {
    const credentials = {
        authentication: strToAuthenticationType(flatDestinations.Authentication),
    };
    //Currentl we are expose the credenials from the list
    return credentials;
}
const sapClient = "sap-client";
const productName = "product.name";
const apiKey = "URL.headers.ApiKey";
const applicationId = "applicationID";
const dynamicDestination = "HTML5.DynamicDestination";
function extractBASProperties(flatDestination) {
    const basProperties = {};
    if (flatDestination.WebIDEAdditionalData) {
        basProperties.additionalData = flatDestination.WebIDEAdditionalData;
    }
    if (flatDestination.WebIDEUsage) {
        basProperties.usage = flatDestination.WebIDEUsage;
    }
    if (flatDestination[dynamicDestination]) {
        basProperties.html5DynamicDestination = flatDestination[dynamicDestination];
    }
    if (flatDestination[sapClient]) {
        basProperties.sapClient = flatDestination[sapClient];
    }
    if (flatDestination[productName]) {
        basProperties.productName = flatDestination[productName];
    }
    if (flatDestination[apiKey]) {
        basProperties.apiKey = flatDestination[apiKey];
    }
    if (flatDestination[applicationId]) {
        basProperties.applicationID = flatDestination[applicationId];
    }
    if (flatDestination.apiBusinessHubEnterpriseURL) {
        basProperties.apiBusinessHubEnterpriseURL =
            flatDestination.apiBusinessHubEnterpriseURL;
    }
    return Object.keys(basProperties).length === 0 ? undefined : basProperties;
}
//Transform the destination format to flat destination
function destinationInfoToAnswerDestination(destinationInfo) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const answerDestination = {
        Name: destinationInfo.name,
        Type: "HTTP",
        Authentication: destinationInfo.credentials.authentication,
        ProxyType: destinationInfo.proxyType,
        URL: destinationInfo.url.toString(),
        WebIDEEnabled: "true",
    };
    if (destinationInfo.credentials.authentication === "BasicAuthentication") {
        if (!destinationInfo.credentials.basicAuthentication) {
            throw new Error("Missing user and password for Basic Authentication");
        }
        answerDestination.User =
            destinationInfo.credentials.basicAuthentication.userName;
        answerDestination.Password =
            destinationInfo.credentials.basicAuthentication.userPassword;
    }
    if (destinationInfo.description) {
        answerDestination.Description = destinationInfo.description;
    }
    if ((_a = destinationInfo.basProperties) === null || _a === void 0 ? void 0 : _a.additionalData) {
        answerDestination.WebIDEAdditionalData =
            destinationInfo.basProperties.additionalData;
    }
    if ((_b = destinationInfo.basProperties) === null || _b === void 0 ? void 0 : _b.usage) {
        answerDestination.WebIDEUsage = String(destinationInfo.basProperties.usage);
    }
    if ((_c = destinationInfo.basProperties) === null || _c === void 0 ? void 0 : _c.sapClient) {
        if (destinationInfo.basProperties.sapClient.length != 3) {
            throw new Error(`${sapClient} "${destinationInfo.basProperties.sapClient}" property length must equal 3.`);
        }
        answerDestination[sapClient] = destinationInfo.basProperties.sapClient;
    }
    if ((_d = destinationInfo.basProperties) === null || _d === void 0 ? void 0 : _d.productName) {
        answerDestination[productName] = destinationInfo.basProperties.productName;
    }
    if ((_e = destinationInfo.basProperties) === null || _e === void 0 ? void 0 : _e.apiKey) {
        answerDestination[apiKey] = destinationInfo.basProperties.apiKey;
    }
    if ((_f = destinationInfo.basProperties) === null || _f === void 0 ? void 0 : _f.applicationID) {
        answerDestination[applicationId] =
            destinationInfo.basProperties.applicationID;
    }
    if ((_g = destinationInfo.basProperties) === null || _g === void 0 ? void 0 : _g.apiBusinessHubEnterpriseURL) {
        answerDestination.apiBusinessHubEnterpriseURL =
            destinationInfo.basProperties.apiBusinessHubEnterpriseURL;
    }
    if (((_h = destinationInfo.basProperties) === null || _h === void 0 ? void 0 : _h.html5DynamicDestination) !== undefined) {
        answerDestination["HTML5.DynamicDestination"] =
            destinationInfo.basProperties.html5DynamicDestination;
    }
    else {
        answerDestination["HTML5.DynamicDestination"] = "true";
    }
    return answerDestination;
}
exports.destinationInfoToAnswerDestination = destinationInfoToAnswerDestination;
// Transform the response destination to the real destination format
function flatDestinationToDestinationBaseInfo(flatDestination) {
    const destination = {
        name: flatDestination.Name,
        type: strToDestinationType(flatDestination.Type),
        credentials: toCredentials(flatDestination),
        proxyType: strToProxyType(flatDestination.ProxyType),
    };
    if (flatDestination.Description) {
        destination.description = flatDestination.Description;
    }
    const basProperties = extractBASProperties(flatDestination);
    if (basProperties) {
        destination.basProperties = basProperties;
    }
    return destination;
}
exports.flatDestinationToDestinationBaseInfo = flatDestinationToDestinationBaseInfo;
// Transform the response destination to the destination list infor that add the host member
function responseDestinationToDestinationListInfo(responseDestination) {
    const detinationBaseInfo = flatDestinationToDestinationBaseInfo(responseDestination);
    const destinationListInfo = Object.assign(Object.assign({}, detinationBaseInfo), { host: responseDestination.Host });
    return destinationListInfo;
}
exports.responseDestinationToDestinationListInfo = responseDestinationToDestinationListInfo;
//get destination headers for all the request from teh server
function getDestinationHeaders() {
    const headers = {
        "Content-Type": "application/json",
    };
    return headers_helper_1.addJwtHeader(headers);
}
exports.getDestinationHeaders = getDestinationHeaders;
//# sourceMappingURL=destinations.js.map