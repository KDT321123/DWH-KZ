import { URL } from "url";

export declare namespace core {
  /**
   * Checks if the runtime environment is SAP Business Application Studio.
   * @Returns true when the runtime environment is SAP Business Application Studio, otherwise returns false.
   */
  export function isAppStudio(): Promise<boolean>;

  /**
   * Adding the JWT header to the existing header.
   * @param headers
   */
  export function addJwtHeader(
    headers: Record<string, string>
  ): Record<string, string>;

  /**
   * Executes a command in SAP Business Application Studio.
   * @param command
   * @param args
   * @Returns string of the executed command result.
   */
  export function runCommand(command: string, args: string[]): Promise<string>;

  /**
   * Retrieves an environment variable value with a provided name.
   * @param name
   * @Returns string of environment variable value.
   */
  export function getEnvValue(name: string): string;
}

/**
 * Enable to connect to the devspace and execute processes on the devspace.
 */
export declare namespace devspaceApi {
  /**
   * Enable to connect to the devspace and execute processes on the devspace.
   */
  export interface IDevspaceApi {
    /**
     * Connect to the devspace.
     * @param jwt is the JWT accepted by the devspace.
     */
    connect(jwt: string): Promise<void>;

    /**
     * Execute a process in the devspace.
     * @param command command to execute.
     * @param args list of arguments to the command.
     */
    execute(command: string, ...args: string[]): void;

    /**
     * @param callback STDOUT of the executed processes.
     */
    onMessage(callback: (output: string) => void): void;

    /**
     * Disconnect from the devspace.
     */
    disconnect(): void;
  }

  /**
   * Create a devspace API object to exectute operations on the devspace.
   * @param devspaceUrl full Url of the devspace websocket.
   * @returns a devspace API object.
   */
  export function devspaceApiFactory(devspaceUrl: string): IDevspaceApi;
}

export declare namespace destinations {
  /**
   *
   * Represents the destination type.
   *   HTTP - The destination defined as the http protocol.
   */
  export type DestinationType = "HTTP";

  /**
   *
   * Represents the proxy types supported by the Connectivity service.
   *  Internet  - The application can connect to an external REST or SOAP service on the Internet.
   *  OnPremise - The application can connect to an on-premise back-end system through the Cloud Connector.
   */
  export type ProxyType = "Internet" | "OnPremise";

  /**
   * Represents the different authentication types for access control.
   *   NoAuthentication    - Used for destinations that refer to a service on the Internet or an on-premise system that does not require authentication.
   *   BasicAuthentication - Used for destinations that refer to a service on the Internet or an on-premise system that requires basic authentication.
   *   NoAuthentication - Create and configure an OAuth2ClientCredentials destination to consume OAuth-protected resources from a Cloud Foundry application.
   */
  export type AuthenticationType =
    | "NoAuthentication"
    | "BasicAuthentication"
    | "OAuth2ClientCredentials";

  /**
   * Exposes basic authentication properties.
   */
  export interface BasicAuthentication {
    /**
     * The username.
     */
    userName: string;

    /**
     * The user password.
     */
    userPassword: string;
  }

  /**
   * Exposes the different credential types for access control.
   */
  export interface Credentials {
    /**
     * The different authentication types for access control.
     */
    authentication: AuthenticationType;

    /**
     * The basic authentication properties that refer to a service on the Internet or an on-premise system.
     */
    basicAuthentication?: BasicAuthentication;
  }

  /**
   *  Represents SAP Business Application Studio properties associated with the destination.
   */
  export interface BASProperties {
    /**
     * Used for OData SAP Business Application Studio destinations (e.g.: odata-abap, odata_gen).
     */
    usage?: string;

    /**
     * Used for additional information for the SAP Business Application Studio destination.
     */
    additionalData?: string;

    /**
     * The SAP client for the catalog service.
     */
    sapClient?: string;

    /**
     * The product name associated with the destination.
     */
    productName?: string;

    /**
     * The apiKey of the product subscription in api business hub enterprise.
     */
    apiKey?: string;

    /**
     * The applicationID of the product subscription in api business hub enterprise.
     */
    applicationID?: string;

    /**
     * The apiBusinessHubEnterpriseURL for the api business hub enterprise navigation url.
     */
    apiBusinessBusinessHubEnterpriseURL?: string;
  }

  /**
   * Specifies the basic destination information.
   */
  export interface DestinationBaseInfo {
    /**
     * Exposes the name of the destination.
     */
    name: string;

    /**
     * Exposes the destination type.
     */
    type: DestinationType;

    /**
     * Exposes the different credential types for access control.
     */
    credentials: Credentials;

    /**
     * Exposes the proxy types supported by the Connectivity service.
     */
    proxyType: ProxyType;

    /**
     * Exposes the destination description.
     */
    description?: string;

    /**
     * Exposes SAP Business Application Studio properties associated with the destination.
     */
    basProperties?: BASProperties;
  }

  /**
   *  Specifies the destination information retrieved by the destination list.
   */
  export interface DestinationListInfo extends DestinationBaseInfo {
    /**
     * The host name of the destination URL.
     */
    host: string;
  }

  /**
   * Specifies the destination information when creating a destination.
   */
  export interface DestinationInfo extends DestinationBaseInfo {
    /**
     * The destination URL.
     */
    url: URL;
  }

  /**
   * Retrieves HTTP destinations for SAP Business Application Studio.
   * @param filter - Destinations containing both the key and at least one value entered are filtered.
   * @throws When a network error occurs.
   */
  export function getDestinations(
    filter?: Map<string, string[]>
  ): Promise<DestinationListInfo[] | undefined>;

  /**
   * Creates a new HTTP destination for SAP Business Application Studio.
   * @throws When the destination already exists or a network error occurs.
   */
  export function createDestination(
    destinaionInfo: DestinationInfo
  ): Promise<void>;
}

export declare namespace hrtt {
  interface HrttHelper {
    /**
     * Retrieves the HRTT URL.
     *
     * Note: This function uses **caching** to retrieve the `hrrt-host` from the destinations.
     *
     * @param endpoint - Specify the `Cloud Foundry` endpoint.
     * @return The HRTT URL
     * @throws Errors when could not return/generate HRTT URL
     */
    getUrl(endpoint: string): Promise<string>;
  }

  /**
   * Creates a new HrttHelper instance.
   *
   * @return A new HrttHelper instance
   */
  export function createHrttHelper(): HrttHelper;
}

export declare namespace devspace {
  /**
   * Information about the current devspace
   */
  export interface DevspaceInfo {
    devspaceDisplayName: string;
    devspaceOrigin: string;
    pack: string;
    packDisplayName: string;
  }
  export function getDevspaceInfo(): Promise<DevspaceInfo>;
}
