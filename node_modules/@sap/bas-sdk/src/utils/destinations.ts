import { URL } from "url";
import { addJwtHeader } from "../apis/headers-helper";

export const ENV_H2O_URL = "H2O_URL";

/**
 * Represents the destination type.
 */
export type DestinationType = "HTTP";

/**
 * Represents the proxy types supported by the Connectivity service.
 */
export type ProxyType = "Internet" | "OnPremise";

/**
 * Represents the different authentication types for access control.
 */
export type AuthenticationType =
  | "NoAuthentication"
  | "BasicAuthentication"
  | "OAuth2ClientCredentials";

export interface FlatDestination {
  Name: string;
  Type: string;
  Authentication: string;
  ProxyType: string;
  Description?: string;

  WebIDEEnabled: string;
  "HTML5.DynamicDestination"?: string;

  "sap-client"?: string;
  WebIDEUsage?: string;
  WebIDEAdditionalData?: string;
  "product.name"?: string;

  User?: string;
  Password?: string;

  "URL.headers.ApiKey"?: string;
  applicationID?: string;
  apiBusinessHubEnterpriseURL?: string;
}

export interface ResponseDestination extends FlatDestination {
  Host: string;
}

export interface AnswerDestination extends FlatDestination {
  URL: string;
}

export interface BasicAuthentication {
  userName: string;
  userPassword: string;
}

export interface Credentials {
  authentication: AuthenticationType;
  basicAuthentication?: BasicAuthentication;
}

export interface BASProperties {
  usage?: string;
  additionalData?: string;
  sapClient?: string;
  productName?: string;
  apiKey?: string;
  applicationID?: string;
  apiBusinessHubEnterpriseURL?: string;
  html5DynamicDestination?: string;
}

export interface DestinationBaseInfo {
  name: string;
  type: DestinationType;
  credentials: Credentials;
  proxyType: ProxyType;
  description?: string;
  basProperties?: BASProperties;
}

export interface DestinationListInfo extends DestinationBaseInfo {
  host: string;
}
export interface DestinationInfo extends DestinationBaseInfo {
  url: URL;
}

export function strToDestinationType(typeName: string): DestinationType {
  const typeNameArr: DestinationType[] = ["HTTP"];
  const destinationType = typeNameArr.find((element) => element === typeName);
  if (!destinationType) {
    throw new Error(`unknown ${typeName} destination type`);
  }
  return destinationType;
}

export function strToAuthenticationType(
  authenticationName: string
): AuthenticationType {
  const authenticationNameArr: AuthenticationType[] = [
    "NoAuthentication",
    "BasicAuthentication",
    "OAuth2ClientCredentials",
  ];
  const authenticationType = authenticationNameArr.find(
    (element) => element === authenticationName
  );
  if (!authenticationType) {
    throw new Error(`unknown ${authenticationName} authentication type`);
  }
  return authenticationType;
}

export function strToProxyType(proxyTypeName: string): ProxyType {
  const proxyTypeNameArr: ProxyType[] = ["Internet", "OnPremise"];
  const proxyType = proxyTypeNameArr.find(
    (element) => element === proxyTypeName
  );
  if (!proxyType) {
    throw new Error(`unknown ${proxyTypeName} proxy type`);
  }
  return proxyType;
}

export function strToBoolean(text: string): boolean {
  if (!text) {
    return false;
  }
  return text.toLocaleLowerCase() === "true";
}

function toCredentials(flatDestinations: FlatDestination): Credentials {
  const credentials: Credentials = {
    authentication: strToAuthenticationType(flatDestinations.Authentication),
  };
  //Currentl we are expose the credenials from the list
  return credentials;
}
const sapClient = "sap-client";
const productName = "product.name";
const apiKey = "URL.headers.ApiKey";
const applicationId = "applicationID";
const dynamicDestination = "HTML5.DynamicDestination";
function extractBASProperties(
  flatDestination: FlatDestination
): BASProperties | undefined {
  const basProperties: BASProperties = {};
  if (flatDestination.WebIDEAdditionalData) {
    basProperties.additionalData = flatDestination.WebIDEAdditionalData;
  }

  if (flatDestination.WebIDEUsage) {
    basProperties.usage = flatDestination.WebIDEUsage;
  }

  if (flatDestination[dynamicDestination]) {
    basProperties.html5DynamicDestination = flatDestination[dynamicDestination];
  }

  if (flatDestination[sapClient]) {
    basProperties.sapClient = flatDestination[sapClient];
  }

  if (flatDestination[productName]) {
    basProperties.productName = flatDestination[productName];
  }

  if (flatDestination[apiKey]) {
    basProperties.apiKey = flatDestination[apiKey];
  }

  if (flatDestination[applicationId]) {
    basProperties.applicationID = flatDestination[applicationId];
  }

  if (flatDestination.apiBusinessHubEnterpriseURL) {
    basProperties.apiBusinessHubEnterpriseURL =
      flatDestination.apiBusinessHubEnterpriseURL;
  }
  return Object.keys(basProperties).length === 0 ? undefined : basProperties;
}

//Transform the destination format to flat destination
export function destinationInfoToAnswerDestination(
  destinationInfo: DestinationInfo
): AnswerDestination {
  const answerDestination: AnswerDestination = {
    Name: destinationInfo.name,
    Type: "HTTP",
    Authentication: destinationInfo.credentials.authentication,
    ProxyType: destinationInfo.proxyType,
    URL: destinationInfo.url.toString(),
    WebIDEEnabled: "true",
  };

  if (destinationInfo.credentials.authentication === "BasicAuthentication") {
    if (!destinationInfo.credentials.basicAuthentication) {
      throw new Error("Missing user and password for Basic Authentication");
    }
    answerDestination.User =
      destinationInfo.credentials.basicAuthentication.userName;
    answerDestination.Password =
      destinationInfo.credentials.basicAuthentication.userPassword;
  }

  if (destinationInfo.description) {
    answerDestination.Description = destinationInfo.description;
  }

  if (destinationInfo.basProperties?.additionalData) {
    answerDestination.WebIDEAdditionalData =
      destinationInfo.basProperties.additionalData;
  }

  if (destinationInfo.basProperties?.usage) {
    answerDestination.WebIDEUsage = String(destinationInfo.basProperties.usage);
  }

  if (destinationInfo.basProperties?.sapClient) {
    if (destinationInfo.basProperties.sapClient.length != 3) {
      throw new Error(
        `${sapClient} "${destinationInfo.basProperties.sapClient}" property length must equal 3.`
      );
    }
    answerDestination[sapClient] = destinationInfo.basProperties.sapClient;
  }

  if (destinationInfo.basProperties?.productName) {
    answerDestination[productName] = destinationInfo.basProperties.productName;
  }

  if (destinationInfo.basProperties?.apiKey) {
    answerDestination[apiKey] = destinationInfo.basProperties.apiKey;
  }

  if (destinationInfo.basProperties?.applicationID) {
    answerDestination[applicationId] =
      destinationInfo.basProperties.applicationID;
  }

  if (destinationInfo.basProperties?.apiBusinessHubEnterpriseURL) {
    answerDestination.apiBusinessHubEnterpriseURL =
      destinationInfo.basProperties.apiBusinessHubEnterpriseURL;
  }

  if (destinationInfo.basProperties?.html5DynamicDestination !== undefined) {
    answerDestination["HTML5.DynamicDestination"] =
      destinationInfo.basProperties.html5DynamicDestination;
  } else {
    answerDestination["HTML5.DynamicDestination"] = "true";
  }

  return answerDestination;
}

// Transform the response destination to the real destination format
export function flatDestinationToDestinationBaseInfo(
  flatDestination: FlatDestination
): DestinationBaseInfo {
  const destination: DestinationBaseInfo = {
    name: flatDestination.Name,
    type: strToDestinationType(flatDestination.Type),
    credentials: toCredentials(flatDestination),
    proxyType: strToProxyType(flatDestination.ProxyType),
  };

  if (flatDestination.Description) {
    destination.description = flatDestination.Description;
  }

  const basProperties = extractBASProperties(flatDestination);
  if (basProperties) {
    destination.basProperties = basProperties;
  }
  return destination;
}

// Transform the response destination to the destination list infor that add the host member
export function responseDestinationToDestinationListInfo(
  responseDestination: ResponseDestination
): DestinationListInfo {
  const detinationBaseInfo = flatDestinationToDestinationBaseInfo(
    responseDestination
  );
  const destinationListInfo: DestinationListInfo = {
    ...detinationBaseInfo,
    host: responseDestination.Host,
  };
  return destinationListInfo;
}
//get destination headers for all the request from teh server
export function getDestinationHeaders(): Record<string, string> {
  const headers: Record<string, string> = {
    "Content-Type": "application/json",
  };
  return addJwtHeader(headers);
}
