#!groovy
@Library(['piper-lib', 'piper-lib-os', 'pipeline_utils', 'jenkins-voter-library', 'wing-pipeline-lib']) _
import com.sap.icd.jenkins.Utils

def piperUtils
def commitId
def dockerImageR = 'docker.wdf.sap.corp:51020/com.sap.devx/build-snapshot:latest'
def dockerImage = "docker.wdf.sap.corp:51020/com.sap.devx.wing/docker-node-mta-snapshot"
//SKIP_BUILD = true
	
if (env.BRANCH_NAME == 'master') {
    properties([
        [$class: 'BuildDiscarderProperty',
         strategy: [$class: 'LogRotator', numToKeepStr: '10']
        ],
        pipelineTriggers([cron('@weekly')])
    ])
}

pipeline {
    agent any
    options {
        timestamps()
        ansiColor('xterm')
        disableConcurrentBuilds()
    }
    environment {
        GITHUB_WDF_TOKEN = credentials('github-wdf-token')
    }

	stages{
		stage('Checkout') {
			steps {
				checkout scm
				setupPipelineEnvironment script: this
				script {
					piperUtils = new com.sap.icd.jenkins.Utils();
				}
			}
		}
		stage ("Run Tests, Lint, version validation, Sonar and Whitesource") {
			steps {
				parallel(
					'Tests': {
						script {
							dockerExecute(script: this, dockerImage: dockerImage, dockerWorkspace: '/home/node') {
								sh """
									npm install
									echo '*** Run TESTS ***'
									npm run test
									echo '*** Run LINTER ***'
									npm run lint
									echo '*** Run Version valiation ***'
									npm run validate-version
									echo '*** Run Coverage ***'
									npm run cover:report
								"""
								stash name: "coverage", includes: 'coverage/**/*'
								archive "coverage/index.html";
								publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'coverage', reportFiles: 'index.html', reportName: 'Code Coverage', reportTitles: '']);
							}		
							def version = sh returnStdout: true, script: 'awk -F\'\\"\' \'/\\"version\\": \\".+\\"/{ print $4; exit; }\' package.json'
							executeSonarScanAndQualityGates([script: this, projectVersion: '1.0.0', owner:'devx-wing'])
						}
					},
					'Whitesource': {
						script {
							checkout scm
							whitesourceExecuteScan script: this
						}
					}
				)
			}
		}
		stage  ("Checkmarx and PPMS") {
			when {
                branch 'master'
            }
			steps {
				parallel(
					'Checkmarx': {
						script {
							checkmarxExecuteScan script: this, checkmarxCredentialsId: "checkmarx_J"
						}
					},
					'PPMS': {
						script {
							sapCheckPPMSCompliance script: this
						}
					}
				)
			}
		}
	/*	stage  ("Bump Version") {
			when {
            	allOf {
                	branch 'master'
	                expression {SKIP_BUILD != true}
    	        }
        	}
			steps {
				dockerExecute(script: this, dockerImage: dockerImageR) {
					checkout scm
					sh """
						git config --global user.email "webide@sap.com"
						git config --global user.name "webidebot"
						git remote set-url origin https://${GITHUB_WDF_TOKEN}@github.wdf.sap.corp/devx-wing/swa-for-sapbas-vsx.git
						npm install
						npm run version:bump
					"""
				}
			}	
		} */
		stage('xMake Stage Build') {
            when {
                branch 'master'
	//			expression {SKIP_BUILD != true}
            }
            steps {
                script {
                    commitId = piperUtils.getGitCommitId();
					executeBuild script: this, buildType: 'xMakeStage', gitCommitId: commitId
                }
            }
        }
		stage('Malware Scan') {
            when {
                branch 'master'
	//			expression {SKIP_BUILD != true}
            }			
			steps {
				script {
					def format = "maven2"
					def stageBom = this.globalPipelineEnvironment.getXMakeProperty('stage-bom')
					def bom = stageBom?.values()?.find { it.format == format }
					def String jsonUrlsString = (bom?.components?.assets?.url).toString()
					jsonUrlsString = jsonUrlsString.substring(2,jsonUrlsString.length()-2)
					println (jsonUrlsString)
					def urls = jsonUrlsString.split() as List;
					for( String url : urls ) {
						if (url.contains("tar.gz")) {
							nexusURL =  url
							break
						}
					}
					println  (nexusURL)
					triggerRemoteJob( job: 'scan-malware-docker',
											remoteJenkinsName: "platform1-jaas",
											parameters: """
											IMAGE_URL=${nexusURL}
											IS_NPM=true
											"""
					)			
				}
			}
		}
		stage("xMake Promote") {
            when {
                branch 'master'
	//			expression {SKIP_BUILD != true}
            }
			steps {
				executeBuild script: this, buildType: 'xMakePromote', gitCommitId: commitId
			}
		}	
	}
}
