'use strict';

const _ = require('lodash');
const MatomoTracker = require('matomo-tracker');
const semverLt = require('semver/functions/lt')

var versionObject = require('./version.json')
const SWA_LIB_VERSION = versionObject.version;

const SITE_TOKEN_ENV_NAME = "SWA_TARGET_SITE_TOKEN";
const SITE_URL_ENV_NAME = "SWA_TARGET_SITE_URL";
const ANALYTICS_ENABLED_SETTING_NAME = "enableSapWebAnalytics";

const VS_CODE_DEFAULTS = {
    URL: "https://webanalytics2.cfapps.eu10.hana.ondemand.com/tracker/log",
    TOKEN: "NWUzNzRlYmItMDFkMC00ZjU2LWJkZmItZTliMWMxMjQxZjMzCg==",
    FIELD_MAPPING: "custom1:e_a custom2:e_2 custom3:e_3 custom4:e_4 custom5:e_5 iaas:e_6 is_sap_user:e_9 landscape:e_7 reporter_identifier:e_10 version:e_8 numeric1:e_int_1 numeric2:e_int_2"
};

class SWATracker {
    constructor(vsxPublisher, vsxPackageName, errorListener) {
        this.isAppStudio = this._isAppStudio();
        this.isExternalTarget = false
        this.errorListener = errorListener
        this.disableTracking = false;
        this.baseUrl = this._getProcessEnv(SITE_URL_ENV_NAME, VS_CODE_DEFAULTS.URL);
        this.siteUrl = this._getSiteUrl();
        this.vsxPackageName = vsxPackageName;
        this.reporterUniqueId = vsxPublisher + "." + vsxPackageName;
        this.apiToken = this._getProcessEnv(SITE_TOKEN_ENV_NAME, this._b64dec(VS_CODE_DEFAULTS.TOKEN));
        this._initFieldMapping();
        this._validateRequiredParams();
        this._setMatomoTracker(this.apiToken, this.baseUrl, this.errorListener)
    }

    async _prepareEvents(customEvents, numericEvents) {

        const myCusEvent = _.slice(customEvents, 0, 5);
        const toReturn = {};
        this._mapCustomObj(myCusEvent, "custom", toReturn);
        
        const myNumEvent = _.slice(numericEvents, 0, 2);
        this._mapCustomObj(myNumEvent, "numeric", toReturn);
        
        toReturn[this.fieldMapping["iaas"]] = this._getIAASParam();
        toReturn[this.fieldMapping["landscape"]] = this._getDataCenterParam();
        toReturn[this.fieldMapping["version"]] = this._getVersion();
        toReturn[this.fieldMapping["is_sap_user"]] = this._getIsSAPUser();
        toReturn[this.fieldMapping["reporter_identifier"]] = this.reporterUniqueId;

        return toReturn;
    }

    _mapCustomObj(myCustomObj, fieldMappingStringPrefix, toReturnMap) {
        for (let i = 0; i < myCustomObj.length; i += 1) {
            const customIndex = i + 1; // Customs are human 'managed', so they aren't zero based like array
            toReturnMap[this.fieldMapping[fieldMappingStringPrefix + customIndex]] = myCustomObj[i];
        }
    }

    track(eventType, customEvents, numericEvents) {
        if(!this._isAnalyticsEnabled() || this.disableTracking) {
            return "AnalyticsDisabled";
        }

        this._prepareEvents(customEvents, numericEvents).then((customEventsObj) => {
            const trackerObj = {
                _id: this.reporterUniqueId,
                event_type: eventType,
                url: this.siteUrl,
                ...customEventsObj
            };
    
            this.matomo.track(trackerObj);
        }).catch() //ignoring 
        return ""
    }

    _getSiteUrl() {
        let url = this._getProcessEnv("H2O_URL","https://code.visualstudio.com/");
        if(this.isAppStudio) {
            url = url.substring(url.indexOf(".") + 1); // clear out possible user info from h2o url
        }

        return url
    }

    _validateRequiredParams() {
        if(this.isAppStudio) {
            if(!this._hasAppStudioEnvVars()) {
                console.log("Could not find SWA env params in appstudio, disabling tracking.");
                this.disableTracking = true;
            }
            if(!this._hasMinimalAllowedVersion()) {
                this.disableTracking = true;
            }
        }
    }

    _initFieldMapping() {
        this.fieldMapping = {};
        const fieldMappingStr = this._getProcessEnv("SWA_FIELD_MAPPING", VS_CODE_DEFAULTS.FIELD_MAPPING);
        if (fieldMappingStr) {
            const fields = fieldMappingStr.split(" ");
            for (let i = 0; i < fields.length; i++) {
                const fieldParts = fields[i].split(":");
                this.fieldMapping[fieldParts[0]] = fieldParts[1];
            }
        }
    }

    _hasAppStudioEnvVars() {
        return this.apiToken !== this._b64dec(VS_CODE_DEFAULTS.TOKEN) && Object.keys(this.fieldMapping).length > 0;
    }

    _hasMinimalAllowedVersion() {
        const minimalAllowedVersion = this._getProcessEnv("SWA_MINIMAL_ALLOWED_VERSION", "na");
        if (minimalAllowedVersion != "na") {
            const isLibVersionSmallerThanAllowed = semverLt(SWA_LIB_VERSION, minimalAllowedVersion)
            if (isLibVersionSmallerThanAllowed) {
                console.log(`Current lib version ${SWA_LIB_VERSION} is not sufficient for the minimal allowed version ${minimalAllowedVersion}`);
                return false;
            }
        }
        return true;
    }

    _isAppStudio() {
        return this._getProcessEnv("H2O_URL","na") !== "na";
    }

    _getVersion() {
        return "na";
    }

    _getIAASParam() {
        return this._getProcessEnv("LANDSCAPE_INFRASTRUCTURE");
    }

    _getDataCenterParam() {
        return this._getProcessEnv("LANDSCAPE_NAME");
    }

    _getIsSAPUser() {
        if (this.isExternalTarget) {
            return "na"
        }

        const anon = this._getProcessEnv("SWA_USER_ANON") === "literalTrue" ? "true" : "false";
        let toReturn = "";
        
        if(anon === "false") {
            toReturn = this._getProcessEnv("USER_NAME").endsWith("@sap.com") ? "true" : "false";
        } else {
            toReturn = "na";
        }

        return toReturn
    }

    _getProcessEnv(param, defaultParam="") {
        const notfound = defaultParam !== "" ? defaultParam : "vscode";
        return process.env.hasOwnProperty.call(process.env, param) ? process.env[param] : notfound;
    }

    _validateConsent() {
        return false;
    }

    _isExcludedAccounts() {
        var excludedEnv = this._getProcessEnv("SWA_EXCLUDED_ACCOUNTS", "na")
        if (excludedEnv == "na") {
            return false
        }
        var tenantName = this._getProcessEnv("TENANT_NAME") 
        var excludedAccounts = Buffer.from(excludedEnv, 'base64').toString('ascii').split(',')
        if (tenantName && excludedAccounts.indexOf(tenantName) == -1) {
            return false
        }
        return true
    }

    _isAnalyticsEnabled() {
        let enabled = undefined;
        try {
            enabled = require('vscode').workspace.getConfiguration().get(this.vsxPackageName + "." + ANALYTICS_ENABLED_SETTING_NAME);
        } catch(e) {
            // Ignore and continue with flow.
        }
        if (enabled === undefined) {
            if (this._getProcessEnv("SWA_USER_ANON") === "literalFalse") {
                enabled = this._validateConsent();
            } else if (this._getProcessEnv("SWA_USER_ANON") === "literalTrue") {
                enabled = true;
            } else { // case we are in vscode and no enable setting is found -> disable reporting
                enabled = false;
            }
            if (this._isExcludedAccounts()) {
                enabled = false;
            }
        }
        return enabled;
    }

    _b64dec(str) {
        return Buffer.from(str, 'base64').toString('ascii').trim();
    }

    _setMatomoTracker(apiToken, baseUrl, errorListener) { 
        this.matomo = new MatomoTracker(apiToken, baseUrl, true);
        if(_.isFunction(errorListener)) {
            const internalErrorListener = (err) => {
                if(err && err != 204) {
                    errorListener(err);
                }
            }
            this.matomo.on('error', internalErrorListener);
        }
    }

    setTarget(baseUrl, apiToken) {
        if (apiToken != null && baseUrl != null) {
            this.isExternalTarget = true
            this.baseUrl = baseUrl;
            this.apiToken = apiToken;            
            this._setMatomoTracker(apiToken, baseUrl, this.errorListener)
        }
    }
}


module.exports = {
    ANALYTICS_ENABLED_SETTING_NAME, 
    SWATracker
};
