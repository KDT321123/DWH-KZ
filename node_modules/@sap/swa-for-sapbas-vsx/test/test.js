const swa = require("../src/index.js");
const assert = require("assert");
const sinon = require("sinon");

const swaObj = new swa.SWATracker("testPublisher","testPackageName");
swaObj.fieldMapping = {
    "custom1": "e_a",
    "custom2": "e_2",
    "custom3": "e_3",
    "custom4": "e_4",
    "custom5": "e_5",
    "iaas": "e_6",
    "landscape": "e_7",
    "version": "e_8",
    "is_sap_user": "e_9",
    "reporter_identifier": "e_10",
    "numeric1":"e_int_1",
    "numeric2":"e_int_2"
};

const testSwa = new swa.SWATracker("testPublisher","testPackageName");

describe("Check _prepareCustomEvents", () => {

    it("validate custom_params", () => {
        return swaObj._prepareEvents(["1","2","3","4","5","6"],[1,2])
        .then(
            res => {
                assert(res.e_a === "1" && res.e_2 === "2" && res.e_3 === "3" && res.e_4 === "4" && res.e_5 === "5" && res.e_int_1 === 1 && res.e_int_2 === 2,"Custom params not inserted correctly")
        })
    });
    it("validate max size of sent obj", () => {
        return swaObj._prepareEvents(["1","2","3","4","5","6","4","5","6","10"]).then(
            res => {
                assert(Object.keys(res).length < 11, "custom events object over max size");
            }
        )
    });
    it("validate custom events obj sends initial params", () => {
        return swaObj._prepareEvents([]).then(

            res => {
                assert(Object.keys(res).length >= 5, "custom events object first 5 elements not reserved.")
            }
        )
    });
    it("validate tracking disabled on nodejs run", () => {
        return assert(!swaObj._isAnalyticsEnabled(), "Analytics not disabled")
    })
});

describe("Check _initFieldMapping", () => {
    beforeEach(function() {
        swaObj.fieldMapping = {};
    });

    it("Fields are set according to mapping string from env var", () => {
        var fakeGetEnv = sinon.fake.returns("custom1:e_a custom2:e_2 reporter_identifier:e_10 version:e_8");
        sinon.replace(swaObj, "_getProcessEnv", fakeGetEnv);

        swaObj._initFieldMapping();
        assert(Object.keys(swaObj.fieldMapping).length == 4);
        assert(swaObj.fieldMapping["custom1"] == "e_a");
        assert(swaObj.fieldMapping["custom2"] == "e_2");
        assert(swaObj.fieldMapping["reporter_identifier"] == "e_10");
        assert(swaObj.fieldMapping["version"] == "e_8");
    })
});

describe("Check track", () => {
    it("Check default _isAnalyticsEnabled", () => {
        var trackResult = testSwa.track("testEventType", "testCustomEventsstEvent")
        assert(trackResult == "AnalyticsDisabled");
    })

    it("Check the return from _validateConsent() is false using env SWA_USER_ANON = \"literalFalse\"", () => {
        process.env.SWA_USER_ANON = "literalFalse";
        var trackResult = testSwa.track("testEventType", "testCustomEventsstEvent")
        assert(trackResult == "AnalyticsDisabled");
    })

    it("Check with env SWA_USER_ANON = \"literalTrue\"", () => {
        process.env.SITE_TOKEN_ENV_NAME = "dummyToken"
        process.env.SWA_USER_ANON = "literalTrue";
        var trackResult = testSwa.track("testEventType", "testCustomEventsstEvent")
        assert(trackResult == "");
    })
    it("Check without SWA_EXCLUDED_ACCOUNTS", () => {
        var trackResult = testSwa.track("testEventType", "testCustomEventsstEvent")
        assert(trackResult == "");
    })
});

describe("Check exculded accounts", () => {
    it("Check with one SWA_EXCLUDED_ACCOUNTS = \"d2luZ3Rlc3RzdWJhY2M\" (wingtestsubacc) without tenant name", () => {
        process.env.SWA_EXCLUDED_ACCOUNTS = "d2luZ3Rlc3RzdWJhY2M";
        var trackResult = testSwa.track("testEventType", "testCustomEventsstEvent")
        assert(trackResult == "");
    })

    it("Check with one SWA_EXCLUDED_ACCOUNTS = \"d2luZ3Rlc3RzdWJhY2M\" (wingtestsubacc)", () => {
        process.env.SWA_EXCLUDED_ACCOUNTS = "d2luZ3Rlc3RzdWJhY2M";
        process.env.TENANT_NAME = "wingtestsubacc";
        var trackResult = testSwa.track("testEventType", "testCustomEventsstEvent")
        assert(trackResult == "AnalyticsDisabled");
    })

    it("Check with one SWA_EXCLUDED_ACCOUNTS = \"d2luZ3Rlc3RzdWJhY2MsYXdzY29uc2FwMTAsYXdzY29uc2FwMTE=\" (wingtestsubacc,awsconsap10,awsconsap11)", () => {
        process.env.SWA_EXCLUDED_ACCOUNTS = "d2luZ3Rlc3RzdWJhY2MsYXdzY29uc2FwMTAsYXdzY29uc2FwMTE=";
        process.env.TENANT_NAME = "awsconsap10";
        var trackResult = testSwa.track("testEventType", "testCustomEventsstEvent")
        assert(trackResult == "AnalyticsDisabled");
    })
});

describe("Using SAP user", () => {
    it("Check non empty H2O_URL value", () => {
        process.env.H2O_URL = "some_h2o_url_value";
        var testSwa = new swa.SWATracker("testPublisher","testPackageName");
        var trackResult = testSwa.track("testEventType", "testCustomEventsstEvent")
        assert(trackResult == "AnalyticsDisabled");
    })
});

describe("Check different target settings", () => {
    it("Check default target behavior", () => {
        process.env.SWA_USER_ANON = "";
        process.env.USER_NAME = "john.smith@sap.com";
        const defaultSwa = new swa.SWATracker("testPublisher","testPackageName");
        assert(defaultSwa.isExternalTarget == false);
        assert(defaultSwa.baseUrl == "https://webanalytics2.cfapps.eu10.hana.ondemand.com/tracker/log");
        assert(defaultSwa.apiToken == "5e374ebb-01d0-4f56-bdfb-e9b1c1241f33");
        assert(defaultSwa._getIsSAPUser() == "true");
    })
    it("Check set target behavior", () => {
        process.env.SWA_USER_ANON = "";
        process.env.USER_NAME = "john.smith@sap.com";
        const SwaWithTarget = new swa.SWATracker("testPublisher","testPackageName");
        SwaWithTarget.setTarget("https://targeturl.com", "targetToken")
        assert(SwaWithTarget.isExternalTarget == true);
        assert(SwaWithTarget.baseUrl == "https://targeturl.com");
        assert(SwaWithTarget.apiToken == "targetToken");
        assert(SwaWithTarget._getIsSAPUser() == "na");
    })
    it("Check set partial target behavior - only URL", () => {
        process.env.SWA_USER_ANON = "";
        process.env.USER_NAME = "john.smith@sap.com";
        const SwaWithPartialTargetOnlyUrl = new swa.SWATracker("testPublisher","testPackageName");
        SwaWithPartialTargetOnlyUrl.setTarget("https://targeturl.com")
        assert(SwaWithPartialTargetOnlyUrl.isExternalTarget == false);
        assert(SwaWithPartialTargetOnlyUrl.baseUrl == "https://webanalytics2.cfapps.eu10.hana.ondemand.com/tracker/log");
        assert(SwaWithPartialTargetOnlyUrl.apiToken == "5e374ebb-01d0-4f56-bdfb-e9b1c1241f33");
        assert(SwaWithPartialTargetOnlyUrl._getIsSAPUser() == "true");
    })
    it("Check set partial target behavior - only token", () => {
        process.env.SWA_USER_ANON = "";
        process.env.USER_NAME = "john.smith@sap.com";
        const SwaWithPartialTargetOnlyToken = new swa.SWATracker("testPublisher","testPackageName");
        SwaWithPartialTargetOnlyToken.setTarget( null, "targetToken")
        assert(SwaWithPartialTargetOnlyToken.isExternalTarget == false);
        assert(SwaWithPartialTargetOnlyToken.baseUrl == "https://webanalytics2.cfapps.eu10.hana.ondemand.com/tracker/log");
        assert(SwaWithPartialTargetOnlyToken.apiToken == "5e374ebb-01d0-4f56-bdfb-e9b1c1241f33");
        assert(SwaWithPartialTargetOnlyToken._getIsSAPUser() == "true");
    })
});

