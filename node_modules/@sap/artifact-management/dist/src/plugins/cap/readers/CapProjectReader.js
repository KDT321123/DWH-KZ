"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
const XsSecurityModuleReader_1 = __importDefault(require("../../xsuaa/readers/XsSecurityModuleReader"));
const InfoList_1 = require("../InfoList");
class CapProjectReader extends artifact_management_base_1.ProjectReader {
    constructor() {
        super({
            requiredFilePatterns: ['package.json'],
        });
        this.additionalModuleReaders = [
            [new XsSecurityModuleReader_1.default()],
        ];
        this.tags = [artifact_management_base_1.Tag.Project, artifact_management_base_1.Tag.CAP];
    }
    getType() {
        return artifact_management_base_1.ProjectType.CAP;
    }
    getDetectionMechanism() {
        return artifact_management_base_1.DetectionMechanism.UNIQUE_IDENTIFICATION;
    }
    async read({ fs }) {
        const helper = new artifact_management_base_1.ProjectReaderHelper(fs);
        if (!await this.isCapProject(helper))
            return undefined;
        const pckg = await helper.readPackageJson();
        const prefix = pckg.name;
        const name = pckg.name;
        const version = pckg.version;
        const projectType = pckg.lcap ? artifact_management_base_1.ProjectType.LCAP : artifact_management_base_1.ProjectType.CAP;
        const projectData = {
            type: projectType,
            path: fs.basePath,
            prefix,
            version,
            cloudService: `lcap.${prefix}`,
            name,
            tags: this.tags,
        };
        const mtaExtensions = await this.probeMtaExtension(fs);
        if (mtaExtensions && mtaExtensions.length > 0) {
            projectData.info = { 'mtaExtensions': mtaExtensions };
        }
        if (!name) {
            if (!projectData.info) {
                projectData.info = {};
            }
            projectData.info['errors'] = [InfoList_1.InfoList.ERR_NAME_UNDEFINED];
        }
        return projectData;
    }
    async isCapProject(helper) {
        return helper.hasPackageDependency('@sap/cds');
    }
    async moduleSearchPattern() {
        return ['*', 'app/*'];
    }
    async probeMtaExtension(fs) {
        const pattern = '**/*.mtaext';
        return fs.glob(pattern, { onlyFiles: true, ignore: ['app/'] });
    }
}
exports.default = CapProjectReader;
//# sourceMappingURL=CapProjectReader.js.map