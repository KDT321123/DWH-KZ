"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
const PlatformContext_1 = require("../../project/PlatformContext");
const OverviewPageGenerator_1 = __importDefault(require("../../cp/OverviewPageGenerator"));
const BuildFactory_1 = __importDefault(require("../../definitions/BuildFactory"));
const cdsWatchOptions = ['port', 'ext', 'livereload', 'open'];
class CapRun extends artifact_management_base_1.ProjectRunner {
    getType() {
        return artifact_management_base_1.ProjectType.CAP;
    }
    async run({ fs, project, options }) {
        const projectGeneratorContext = new artifact_management_base_1.ModuleGeneratorContext(project, fs, artifact_management_base_1.NameFactory.getInstance(project.prefix));
        const context = { platform: PlatformContext_1.PLATFORM.CF };
        const projectBuilder = BuildFactory_1.default.getBuilder(context, projectGeneratorContext.project, projectGeneratorContext.projectFs);
        const overviewPage = new OverviewPageGenerator_1.default(projectBuilder);
        await overviewPage.build(projectGeneratorContext);
        if (this.needRun(options)) {
            const cmd = /^win/.test(process.platform) ? 'cds.cmd' : 'cds';
            if (options && options.length > 0) {
                const opts = this.buildOptions(options);
                artifact_management_base_1.Util.exec({ cwd: fs.path() }, cmd, 'watch', ...opts);
            }
            else {
                artifact_management_base_1.Util.exec({ cwd: fs.path() }, cmd, 'watch');
            }
        }
    }
    needRun(options) {
        if (options && options[options.length - 1] === 'launchpad') {
            options.pop();
            return false;
        }
        return true;
    }
    buildOptions(options) {
        const portIndex = options.indexOf('port');
        if (portIndex >= 0 && (portIndex >= options.length - 1 || isNaN(Number(options[portIndex + 1])))) {
            options.splice(portIndex + 1, 0, '0');
        }
        const cmdOptions = [];
        for (const value of options) {
            // Check if the value is cli option or argument
            if (cdsWatchOptions.includes(value)) {
                cmdOptions.push('--' + value);
            }
            else {
                cmdOptions.push(String(value));
            }
        }
        return cmdOptions;
    }
}
exports.default = CapRun;
//# sourceMappingURL=CapRun.js.map