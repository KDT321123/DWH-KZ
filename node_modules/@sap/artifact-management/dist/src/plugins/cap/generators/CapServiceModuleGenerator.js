"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
class CapServiceModuleGenerator {
    getType() {
        return artifact_management_base_1.ModuleType.CAP;
    }
    async provideResources(context) {
        const resources = [{
                service: artifact_management_base_1.ServiceCatalog.capservice.name,
                plan: artifact_management_base_1.ServiceCatalog.capservice.plan,
                name: `${context.nameFactory.destinationToApp('srv')}`,
                type: artifact_management_base_1.ServiceType.CAP_SERVICE,
                createDestination: true,
                config: {
                    URL: '~{srv-api/srv-url}',
                    providesByName: 'srv-api',
                    destination: {
                        type: artifact_management_base_1.DestinationType.DEST_TO_RESOURCE_BEHIND_XSUAA,
                        authentication: artifact_management_base_1.AuthenticationType.OAuth2UserTokenExchange,
                    },
                },
            },
            {
                service: artifact_management_base_1.ServiceCatalog.metadata.name,
                plan: artifact_management_base_1.ServiceCatalog.metadata.plan,
                name: `${context.nameFactory.serviceInstanceName('metadata')}`,
                type: artifact_management_base_1.ServiceType.CF_USER_PROVIDED_SERVICE,
                config: {
                    'default-domain': '${default-domain}',
                },
            },
            {
                service: artifact_management_base_1.ServiceCatalog.logservice.name,
                plan: artifact_management_base_1.ServiceCatalog.logservice.plan,
                name: `${context.nameFactory.serviceInstanceName('logs')}`,
                type: artifact_management_base_1.ServiceType.CF_MANAGED_SERVICE,
            }];
        if (this.getPDMServiceItem(context)) {
            const pdmResource = {
                service: artifact_management_base_1.ServiceCatalog.personal_data_manager.name,
                plan: artifact_management_base_1.ServiceCatalog.personal_data_manager.plan,
                name: context.nameFactory.serviceInstanceName('pdm'),
                type: artifact_management_base_1.ServiceType.CF_MANAGED_SERVICE,
                config: {
                    'xs-security': {
                        xsappname: context.nameFactory.getPrefix() + '${space}',
                        'authorities': [
                            '$ACCEPT_GRANTED_AUTHORITIES',
                        ],
                    },
                    'fullyQualifiedApplicationName': context.nameFactory.getPrefix() + '${space}-${org}',
                    'appConsentServiceEnabled': true,
                },
            };
            resources.push(pdmResource);
        }
        return resources;
        //Above is a dummy service being returned back & service instance will be created for it.
        // To ensure destination creation happens uniformly even the above is being treated as a service.
    }
    async beforeBuildCommands() {
        return [];
    }
    async getModuleManifest(context) {
        context.url = '${default-url}';
        const templatePath = __dirname + '/';
        return await artifact_management_base_1.MtaTemplate.build(templatePath, 'mta-cap-srv-template.yaml', context);
    }
    requires(context) {
        const requiredServices = [
            { serviceName: artifact_management_base_1.ServiceCatalog.xsuaa.name },
            { serviceName: artifact_management_base_1.ServiceCatalog.hana.name },
            { serviceName: artifact_management_base_1.ServiceCatalog.destination.name },
            { serviceName: artifact_management_base_1.ServiceCatalog.metadata.name },
            { serviceName: artifact_management_base_1.ServiceCatalog.connectivity.name },
            { serviceName: artifact_management_base_1.ServiceCatalog.logservice.name },
        ];
        const pdmServiceItem = this.getPDMServiceItem(context);
        if (pdmServiceItem) {
            const pdmService = {
                serviceName: artifact_management_base_1.ServiceCatalog.personal_data_manager.name,
                parameters: {
                    'config': {
                        'fullyQualifiedApplicationName': context.nameFactory.getPrefix() + '${space}-${org}',
                        'fullyQualifiedModuleName': context.nameFactory.getPrefix() + '${space}-${org}',
                        'applicationTitle': `${context.project.name} for LCAP`,
                        'applicationTitleKey': `${context.project.name} for LCAP`,
                        'applicationURL': '${default-url}',
                        'endPoints': [{
                                'type': 'odatav4',
                                'serviceName': context.nameFactory.serviceInstanceName('pdm'),
                                'serviceTitle': 'OData service for Personal Data Manager',
                                'serviceTitleKey': 'OData service for Personal Data Manager',
                                'serviceURI': pdmServiceItem.ref,
                                'hasGdprV4Annotations': true,
                                'cacheControl': 'no-cache',
                            }],
                    },
                },
            };
            requiredServices.push(pdmService);
        }
        return requiredServices;
    }
    getPDMServiceItem(context) {
        for (const module of context.project.modules) {
            if (module.name === 'srv') {
                for (const item of module.items) {
                    if (item.info && item.info.isPDMItem === true && item.type === 'com.sap.cap/Service') {
                        return item;
                    }
                }
            }
        }
        return undefined;
    }
}
exports.default = CapServiceModuleGenerator;
//# sourceMappingURL=CapServiceModuleGenerator.js.map