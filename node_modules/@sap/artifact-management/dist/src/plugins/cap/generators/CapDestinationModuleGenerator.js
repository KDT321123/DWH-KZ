"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapDestinationModuleGenerator = void 0;
const lodash_1 = __importDefault(require("lodash"));
const artifact_management_base_1 = require("@sap/artifact-management-base");
class CapDestinationModuleGenerator {
    getType() {
        return artifact_management_base_1.ModuleType.CAP;
    }
    async provideResources(context) {
        return [
            {
                name: context.nameFactory.serviceInstanceName('destination'),
                service: artifact_management_base_1.ServiceCatalog.destination.name,
                plan: artifact_management_base_1.ServiceCatalog.destination.plan,
                type: artifact_management_base_1.ServiceType.CF_MANAGED_SERVICE,
                config: {
                    HTML5Runtime_enabled: true,
                    version: '1.0.0',
                },
            },
            {
                name: context.nameFactory.serviceInstanceName('connectivity'),
                service: artifact_management_base_1.ServiceCatalog.connectivity.name,
                plan: artifact_management_base_1.ServiceCatalog.connectivity.plan,
                type: artifact_management_base_1.ServiceType.CF_MANAGED_SERVICE,
            },
        ];
    }
    async beforeBuildCommands() {
        return [];
    }
    async getModuleManifest(context) {
        const destinations = this.getDestinationsToBeCreated(context.services, context);
        const module = {
            name: context.nameFactory.auxModuleName('destinations'),
            type: artifact_management_base_1.MtaModuleType.APPLICATION_CONTENT,
            parameters: {
                content: {
                    subaccount: {
                        existing_destinations_policy: 'update',
                        destinations: destinations,
                    },
                },
            },
            'build-parameters': {
                'no-source': true,
            },
        };
        return module;
    }
    getDestinationsToBeCreated(services, context) {
        const servicesNeedingDestination = services.filter((service) => service.createDestination);
        const destinations = [];
        for (const service of servicesNeedingDestination) {
            const destinationType = lodash_1.default.get(service, 'config.destination.type');
            //https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/8aeea65eb9d64267b554f64a3db8a349.html
            //Read above link to understand about creation of diff destination types creation via Content Types.
            if (destinationType === artifact_management_base_1.DestinationType.DEST_TO_SERVICE_INSTANCE) {
                destinations.push(this.getDestinationToServiceInstanceInfo(service, context, true));
            }
            else /* istanbul ignore else */ if (destinationType === artifact_management_base_1.DestinationType.DEST_TO_RESOURCE_BEHIND_XSUAA) {
                destinations.push(this.getDestinationToResourceBehindXsuaaInfo(service, context));
            }
            else if (destinationType === artifact_management_base_1.DestinationType.DEST_TO_SERVICE_INSTANCE_NO_CLOUD) {
                destinations.push(this.getDestinationToServiceInstanceInfo(service, context, false));
            }
            else {
                /* istanbul ignore next */
                throw new Error(`Service ${service.name} - ${service.service} - ${service.plan} - destination data incorrectly provided. Check provideResource method of the module.`);
            }
        }
        return destinations;
    }
    getDestinationToServiceInstanceInfo(service, context, hasCloud) {
        const destinationData = new artifact_management_base_1.DestinationData();
        const authenticationType = lodash_1.default.get(service, 'config.destination.authentication');
        if (authenticationType) {
            destinationData.Authentication = authenticationType;
        }
        destinationData.Name = context.nameFactory.destinationToService(service.name);
        destinationData.ServiceInstanceName = service.name;
        destinationData.ServiceKeyName = `${service.name}-key`;
        /* istanbul ignore else */
        if (hasCloud) {
            destinationData['sap.cloud.service'] = context.project.cloudService;
        }
        return destinationData;
    }
    getDestinationToResourceBehindXsuaaInfo(service, context) {
        const destinationData = new artifact_management_base_1.DestinationData();
        const uaaService = this.findService(context.services, 'xsuaa');
        const authenticationType = lodash_1.default.get(service, 'config.destination.authentication');
        /* istanbul ignore else */
        if (authenticationType) {
            destinationData.Authentication = authenticationType;
        }
        destinationData.Name = `${service.name}`;
        destinationData.TokenServiceInstanceName = uaaService.name;
        destinationData.TokenServiceKeyName = `${uaaService.name}-key`;
        destinationData.URL = service.config.URL;
        destinationData['sap.cloud.service'] = context.project.cloudService;
        return destinationData;
    }
    findService(services, serviceName, servicePlan) {
        return services.find((service) => {
            if (service.service === serviceName) {
                /* istanbul ignore else */
                if (!servicePlan || servicePlan === service.plan) {
                    return service;
                }
            }
        });
    }
    requires(context) {
        const servicesNeedingDestination = context.services.filter((service) => service.createDestination);
        const modRequires = [];
        for (const service of servicesNeedingDestination) {
            const require = {
                serviceName: service.service,
            };
            if (service.service !== 'capservice') {
                require.parameters = { 'service-key': { name: `${service.name}-key` } };
            }
            modRequires.push(require);
        }
        modRequires.push({ serviceName: artifact_management_base_1.ServiceCatalog.destination.name,
            parameters: {
                'content-target': true,
            },
        });
        return modRequires;
    }
}
exports.CapDestinationModuleGenerator = CapDestinationModuleGenerator;
//# sourceMappingURL=CapDestinationModuleGenerator.js.map