"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
class XsSecurityModuleManifestGenerator {
    getType() {
        return artifact_management_base_1.ModuleType.XsSecurity;
    }
    async provideResources(mgContext) {
        const cwd = process.cwd();
        process.chdir(mgContext.fs().rootPath);
        if (/^win/.test(process.platform)) {
            await artifact_management_base_1.Util.exec('cds.cmd', 'compile', 'srv', '--to', 'xsuaa', '\>', 'xs-security.json');
        }
        else {
            await artifact_management_base_1.Util.exec('bash', '-c', 'cds compile srv --to xsuaa > xs-security.json');
        }
        await this.configureXsSecurity(mgContext);
        process.chdir(cwd);
        return [{
                name: mgContext.nameFactory.serviceInstanceName('uaa'),
                service: artifact_management_base_1.ServiceCatalog.xsuaa.name,
                plan: artifact_management_base_1.ServiceCatalog.xsuaa.plan,
                type: artifact_management_base_1.ServiceType.CF_MANAGED_SERVICE,
                path: mgContext.fs().relativeToRoot('xs-security.json'),
                createDestination: true,
                config: {
                    destination: {
                        type: artifact_management_base_1.DestinationType.DEST_TO_SERVICE_INSTANCE,
                        authentication: artifact_management_base_1.AuthenticationType.OAuth2UserTokenExchange,
                    },
                    xsappname: this.sec.xsappname + '-${space}',
                    'role-collections': await this.getRoleCollection(mgContext.fs()),
                },
            }];
    }
    async beforeBuildCommands(mgContext) {
        return [];
    }
    async getModuleManifest(context) {
        return null;
    }
    requires() {
        return [];
    }
    async getXsSecurityContents(fs) {
        if (!this.sec) {
            this.sec = await fs.readJson('xs-security.json');
        }
        return this.sec;
    }
    async configureXsSecurity(context) {
        const fileContents = await this.getXsSecurityContents(context.fs());
        fileContents.xsappname = context.project.prefix;
        fileContents['tenant-mode'] = 'dedicated';
        const pdmServiceItem = this.getPDMServiceItem(context);
        if (pdmServiceItem) {
            for (const scope of fileContents.scopes) {
                if (scope.name === `$XSAPPNAME.${pdmServiceItem.info.scopeName}`) {
                    scope['grant-as-authority-to-apps'] = [
                        `$XSSERVICENAME(${context.nameFactory.serviceInstanceName('pdm')})`,
                    ];
                    break;
                }
            }
            fileContents.authorities = [`$XSAPPNAME.${pdmServiceItem.info.scopeName}`];
        }
        this.sec = fileContents;
        await context.fs().writeJSON('xs-security.json', fileContents);
    }
    async getRoleCollection(fs) {
        const scopes = this.sec.scopes;
        const roleCollections = [];
        let xsSecurityChanged = false;
        if (scopes && scopes.length) {
            for (const scope of scopes) {
                let description = scope.description;
                try {
                    const roles = await fs.readJson('roles.roledefault');
                    const scopeName = scope.name.split('.')[1];
                    for (const role of roles) {
                        if (role.Name === scopeName) {
                            description = role.Description;
                            for (const template of (this.sec['role-templates'] || [])) {
                                if (role.Name === template.name) {
                                    template.description = role.Description;
                                    xsSecurityChanged = true;
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
                catch (error) { }
                const roleCollection = {
                    description: description,
                    name: this.sec.xsappname + '-' + scope.name.split('.')[1] + '-${space}',
                    'role-template-references': [scope.name],
                };
                roleCollections.push(roleCollection);
            }
        }
        if (xsSecurityChanged) {
            await fs.writeJSON('xs-security.json', this.sec);
        }
        return roleCollections;
    }
    getPDMServiceItem(context) {
        for (const module of context.project.modules) {
            if (module.name === 'srv') {
                for (const item of module.items) {
                    if (item.info && item.info.isPDMItem === true && item.type === 'com.sap.cap/Service') {
                        return item;
                    }
                }
            }
        }
        return undefined;
    }
}
exports.default = XsSecurityModuleManifestGenerator;
//# sourceMappingURL=XsSecurityModuleManifestGenerator.js.map