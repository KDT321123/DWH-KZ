"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
const InfoList_1 = require("../InfoList");
class UI5ModuleReader extends artifact_management_base_1.ModuleReader {
    constructor() {
        super(...arguments);
        this.matchConditions = {
            requiredFilePatterns: ['webapp/manifest.json'],
            rule: async (context) => {
                if (context.matchType !== 'required') {
                    return false;
                }
                if (await context.fs.fileExists('ui5.yaml')) {
                    const ui5Yaml = JSON.stringify(await context.fs.readYaml('ui5.yaml'));
                    const parsedUi5Yaml = JSON.parse(ui5Yaml);
                    if (parsedUi5Yaml && parsedUi5Yaml.metadata && parsedUi5Yaml.metadata.name && parsedUi5Yaml.metadata.name === 'launchpad') {
                        return false;
                    }
                    return true;
                }
                const targetFS = artifact_management_base_1.FileSystemFactory.getFileSystem(context.fs.rootPath);
                const projectPackageJson = await targetFS.readJson('package.json');
                if (projectPackageJson.sapux) {
                    this.manifestJson = await context.fs.readJson('webapp/manifest.json');
                    for (const path of projectPackageJson.sapux) {
                        if (context.fs.basePath.includes(path)) {
                            return true;
                        }
                    }
                }
                return false;
            },
        };
        this.itemTags = [artifact_management_base_1.Tag.Item, artifact_management_base_1.Tag.UI5, artifact_management_base_1.Tag.UI];
        this.itemReaders = [
            {
                matchConditions: {
                    requiredFilePatterns: ['webapp/manifest.json'],
                },
                types: [artifact_management_base_1.ItemType.UI5Application, artifact_management_base_1.ItemType.UI5Component, artifact_management_base_1.ItemType.UI5View],
                tags: this.itemTags,
                read: (options) => this.readItems(options),
            },
        ];
        this.tags = [artifact_management_base_1.Tag.Module, artifact_management_base_1.Tag.UI5];
    }
    getType() {
        return artifact_management_base_1.ModuleType.UI5;
    }
    getDetectionMechanism() {
        return artifact_management_base_1.DetectionMechanism.UNIQUE_IDENTIFICATION;
    }
    async read({ fs }) {
        let name = '';
        if (!this.manifestJson) {
            const ui5 = await fs.readYaml('ui5.yaml');
            if (ui5.metadata && ui5.metadata.name) {
                name = ui5.metadata.name;
            }
        }
        else {
            name = this.manifestJson['sap.app'].id;
            this.manifestJson = undefined;
        }
        const module = {
            type: artifact_management_base_1.ModuleType.UI5,
            name: name,
            path: fs.relativeToRoot(),
            tags: this.tags,
        };
        if (!name) {
            module.info = { 'errors': [InfoList_1.InfoList.ERR_MODULE_SAP_APP_ID_UNDEFINED, InfoList_1.InfoList.ERR_METADATA_NAME_UNDEFINED] };
        }
        return module;
    }
    async readItems({ fs }) {
        var _a, _b;
        const items = [];
        const manifest = new artifact_management_base_1.UIManifest(fs, 'webapp/manifest.json');
        await manifest.load();
        const app = manifest.data['sap.app'];
        const templateData = app.sourceTemplate ? app.sourceTemplate : '';
        const applicationLinks = [];
        for (const dataSource of Object.values(manifest.dataSources())) {
            if (dataSource.type === 'OData') {
                applicationLinks.push({
                    linkType: artifact_management_base_1.LinkType.DEPENDS_ON,
                    type: artifact_management_base_1.ItemType.CAPService,
                    ref: this.normalizeRef(dataSource.uri),
                });
            }
        }
        const ui5manifestHelper = new artifact_management_base_1.UI5ManifestHelper(manifest);
        const title = await ui5manifestHelper.getLocalisedValue(app.title);
        const item = {
            type: artifact_management_base_1.ItemType.UI5Application,
            name: title,
            ref: app.id,
            path: fs.relativeToRoot('webapp/manifest.json'),
            links: applicationLinks,
            sourceTemplate: templateData,
            tags: this.itemTags,
        };
        if (!app.id || title.startsWith('<missing') || (!app.sourceTemplate || !app.sourceTemplate.id)) {
            const info = new artifact_management_base_1.Info();
            if (!app.id) {
                info.add(InfoList_1.InfoList.ERR_ITEM_SAP_APP_ID_UNDEFINED);
            }
            if (title.startsWith('<missing')) {
                info.add(InfoList_1.InfoList.ERR_SAP_APP_TITLE_UNDEFINED);
            }
            if (!app.sourceTemplate || !app.sourceTemplate.id) {
                info.add(InfoList_1.InfoList.ERR_SOURCETEMPLATE_ID_UNDEFINED);
            }
            item.info = info.getStateMessages();
        }
        items.push(item);
        for (const crossNavigation of Object.values(manifest.crossNavigationInbounds())) {
            const item = {
                type: artifact_management_base_1.ItemType.NavigationTarget,
                name: `${crossNavigation.semanticObject}-${crossNavigation.action}`,
                ref: `${crossNavigation.semanticObject}-${crossNavigation.action}`,
                path: fs.relativeToRoot('webapp/manifest.json'),
                tags: this.itemTags,
            };
            if (!crossNavigation.semanticObject || !crossNavigation.action) {
                const info = new artifact_management_base_1.Info();
                if (!crossNavigation.semanticObject) {
                    info.add(InfoList_1.InfoList.ERR_CROSSNAVIGSTION_SEMANTIC_OBJECT_UNDEFINED);
                }
                if (!crossNavigation.action) {
                    info.add(InfoList_1.InfoList.ERR_CROSSNAVIGSTION_ACTION_UNDEFINED);
                }
                item.info = info.getStateMessages();
            }
            items.push(item);
        }
        const targets = ((_b = (_a = manifest.data['sap.ui5']) === null || _a === void 0 ? void 0 : _a.routing) === null || _b === void 0 ? void 0 : _b.targets) || {};
        for (const target of Object.values(targets)) {
            switch (target.type) {
                case 'Component':
                    const item = {
                        type: artifact_management_base_1.ItemType.UI5Component,
                        name: target.id,
                        ref: `${app.id}.${target.id}`,
                        path: fs.relativeToRoot('webapp/manifest.json'),
                        tags: this.itemTags,
                    };
                    if (!target.id) {
                        item.info = { 'errors': [InfoList_1.InfoList.ERR_TARGET_ID_UNDEFINED] };
                    }
                    items.push(item);
                    break;
                default:
                    break;
            }
        }
        return items;
    }
    removeTrailingSlash(ref) {
        return ref.endsWith('/') ? ref.substr(0, ref.length - 1) : ref;
    }
    addLeadingSlash(ref) {
        return !ref.match(/^(https:\/\/|\/)/) ? `/${ref}` : ref;
    }
    normalizeRef(ref) {
        return this.addLeadingSlash(this.removeTrailingSlash(ref));
    }
}
exports.default = UI5ModuleReader;
//# sourceMappingURL=UI5ModuleReader.js.map