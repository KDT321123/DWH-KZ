"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
const yeoman_test_1 = require("yeoman-test");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const headless_1 = __importDefault(require("@sap/generator-fiori/generators/deployment-generator/headless"));
class UI5ModuleGenerator {
    getXSAppJson(context) {
        var _a;
        const xsAppJson = {
            welcomeFile: '/index.html',
            authenticationMethod: 'route',
            logout: {
                logoutEndpoint: '/do/logout',
            },
            routes: [],
            responseHeaders: [
                {
                    name: 'Content-Security-Policy',
                    value: 'frame-ancestors \'self\' *.hana.ondemand.com *applicationstudio.cloud.sap',
                },
            ],
        };
        /* istanbul ignore next */
        for (const item of (_a = context.module) === null || _a === void 0 ? void 0 : _a.items) {
            if (item.type !== artifact_management_base_1.ItemType.UI5Application) {
                continue;
            }
            for (const link of item.links || []) {
                /* istanbul ignore else */
                if (!(link.linkType === artifact_management_base_1.LinkType.DEPENDS_ON && link.type === artifact_management_base_1.ItemType.CAPService)) {
                    continue;
                }
                xsAppJson.routes.push({
                    source: `^${link.ref}/(.*)$`,
                    target: `${link.ref}/$1`,
                    destination: context.nameFactory.destinationToApp('srv'),
                    authenticationType: 'xsuaa',
                });
            }
        }
        xsAppJson.routes.push({
            'source': '^(.*)$',
            'target': '$1',
            'service': 'html5-apps-repo-rt',
            'authenticationType': 'xsuaa',
        });
        return xsAppJson;
    }
    ;
    async modifyManifestJson(context) {
        const manifest = new artifact_management_base_1.UIManifest(context.fs(), 'webapp/manifest.json');
        await manifest.load();
        manifest.data['sap.cloud'] = {
            public: true,
            service: context.project.cloudService,
        };
        for (const dataSource of Object.values((manifest.dataSources()))) {
            // Remove leading slash to convert to a relative URL
            if (dataSource.uri.startsWith('/'))
                dataSource.uri = dataSource.uri.substr(1);
        }
        await manifest.save();
    }
    getType() {
        return artifact_management_base_1.ModuleType.UI5;
    }
    async provideResources() {
        return [];
    }
    async beforeBuildCommands() {
        return [];
    }
    // @todo: Need to address saving xs-app.json and manifest.json for ui5 modules.
    async getModuleManifest(context, useHeadlessGenerator) {
        var _a, _b;
        /* istanbul ignore next */
        const zipName = `${(_a = context.module) === null || _a === void 0 ? void 0 : _a.name.replace(/\./g, '')}.zip`;
        const retObj = {
            name: context.nameFactory.moduleName((_b = context.module) === null || _b === void 0 ? void 0 : _b.name),
            type: artifact_management_base_1.MtaModuleType.HTML5,
            path: context.fs().relativeToRoot(),
            'build-parameters': {
                builder: 'custom',
                commands: [],
                _artifactName: zipName,
                'supported-platforms': [],
                'build-result': 'dist-zip',
            },
        };
        if (useHeadlessGenerator) {
            if (!await artifact_management_base_1.NPMUtil.checkMTA()) {
                throw new Error('This feature requires mta to be installed.');
            }
            await this.runHeadlessDeploymentGenerator(context);
            retObj['build-parameters'].commands.push('npm install', 'npm run build:cf');
            retObj['build-parameters']['build-result'] = 'dist';
        }
        else {
            this.modifyManifestJson(context);
            retObj['build-parameters'].commands.push('rm -rf dist-zip dist', 'npx -p @ui5/cli ui5 build --dest dist --include-task=generateManifestBundle --include-task=generateCachebusterInfo', 'mkdir dist-zip', `bash -c "cd dist && npx bestzip ../dist-zip/${zipName} *"`);
        }
        return retObj;
    }
    requires() {
        return [];
    }
    async runHeadlessDeploymentGenerator(context) {
        var _a;
        const deployConfigGen = {
            Generator: headless_1.default,
            path: '@sap/generator-fiori/generators/deployment-generator/headless',
        };
        const appConfig = {
            project: {
                name: (_a = context.module) === null || _a === void 0 ? void 0 : _a.path,
                targetFolder: context.project.path,
            },
            deployConfig: {
                deployTarget: 'CF',
                destinationName: context.nameFactory.destinationToApp('srv'),
                cloudServiceName: context.project.cloudService,
                lcapModeOnly: true,
            },
        };
        await yeoman_test_1.run(deployConfigGen.Generator).withOptions(Object.assign({
            appConfig: appConfig,
            skipInstall: true,
        }));
    }
}
exports.default = UI5ModuleGenerator;
//# sourceMappingURL=UI5ModuleGenerator.js.map