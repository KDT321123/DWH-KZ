"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
const path_1 = __importDefault(require("path"));
const PluginFactory_1 = __importDefault(require("../definitions/PluginFactory"));
const NavigationMode = Object.freeze({
    EMBEDDED: 'embedded',
    NEW_WINDOW: 'newWindow',
    REPLACE: 'replace',
    NEW_WINDOW_THEN_EMBEDDED: 'newWindowThenEmbedded',
});
class LaunchpadPageGenerator {
    constructor() {
        this.cloudService = '';
    }
    async build(project, fs, isCurrentApiDeploy) {
        this.cloudService = project.cloudService.replace(/\./g, '');
        return await this.render(project, fs, isCurrentApiDeploy);
    }
    async render(project, fs, isCurrentApiDeploy) {
        const applications = [];
        for (const module of project.modules) {
            /* istanbul ignore else */
            if (!module.tags.includes(artifact_management_base_1.Tag.TaskUI)) {
                let runUI;
                try {
                    runUI = PluginFactory_1.default.getModuleRunnerFor(module.type);
                }
                catch (error) {
                    /* istanbul ignore else */
                    if (error instanceof artifact_management_base_1.PluginNotFoundError)
                        continue;
                    throw error;
                }
                applications.push(...await runUI.applications({ module, fs: fs.navigate(module.path) }));
            }
        }
        const templateFs = artifact_management_base_1.FileSystemFactory.getFileSystem(__dirname);
        const launchpage = await templateFs.renderTemplate('templates/file-templates/launchpadPage-template.html', {
            applications: JSON.stringify(this.buildUShellConfig(applications, isCurrentApiDeploy), null, 2),
        });
        fs.writeTextFile('app/launchpadPage.html', launchpage);
        return applications.length;
    }
    buildUShellConfig(applications, isCurrentApiDeploy) {
        const uShellApplications = {};
        for (const application of applications) {
            let path;
            if (!isCurrentApiDeploy) {
                path = path_1.default.normalize(application.path);
                /* istanbul ignore else */
                if (path.startsWith('app' + path_1.default.sep))
                    path = path_1.default.relative('app', path);
                path = path_1.default.posix.format(path_1.default.parse(path));
                path = `./${path}`;
            }
            else {
                path = `../${this.cloudService}.${application.deploymentId}`;
            }
            const uShellApplication = {
                title: application.title,
                description: application.description,
                applicationType: 'URL',
                // We want to navigate to the applications in new browser window and not in the same iframe.
                // Also we want the application to be inside the launchpad view.
                navigationMode: NavigationMode.NEW_WINDOW_THEN_EMBEDDED,
                url: path,
            };
            if (application.ui5Component) {
                uShellApplication.additionalInformation = `SAPUI5.Component=${application.ui5Component}`;
            }
            uShellApplications[`${application.semanticObject}-${application.action}`] = uShellApplication;
        }
        return {
            defaultRenderer: 'fiori2',
            renderers: {
                fiori2: {
                    componentData: {
                        config: {
                            enableSearch: false,
                        },
                    },
                },
            },
            applications: uShellApplications,
        };
    }
}
exports.default = LaunchpadPageGenerator;
//# sourceMappingURL=LaunchpadPageGenerator.js.map