"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
const LaunchpadPageGenerator_1 = __importDefault(require("./LaunchpadPageGenerator"));
const WEBAPP_SECTION_DESCRIPTION = {
    ZERO_APPS: 'No web applications are included.',
    NON_ZERO_APPS: 'The user will have the following applications. Click to explore them live.',
};
const PAGE_TITLE = {
    PREVIEW: 'Project Preview',
    DEPLOY: 'Application Overview',
};
class OverviewPageGenerator {
    constructor(projectBuilder) {
        this.overviewAppPath = 'build/launchpad/webapp';
        this.projectBuilder = projectBuilder;
    }
    async build(projectGeneratorContext, isCurrentApiDeploy = false) {
        const launchpadPage = new LaunchpadPageGenerator_1.default();
        const applicationsCount = await launchpadPage.build(projectGeneratorContext.project, projectGeneratorContext.fs(), isCurrentApiDeploy);
        await this.render(projectGeneratorContext, applicationsCount, isCurrentApiDeploy);
    }
    async render(projectGeneratorContext, applicationsCount, isCurrentApiDeploy) {
        const fs = projectGeneratorContext.fs();
        const templateFs = artifact_management_base_1.FileSystemFactory.getFileSystem(__dirname);
        await artifact_management_base_1.Util.exec({ cwd: fs.rootPath }, 'cp', '-a', `${templateFs.rootPath}/templates/assets`, 'app/');
        // Get data for the service tables
        const servicesData = await this.getServicesTableData(projectGeneratorContext, isCurrentApiDeploy);
        const pageTitle = isCurrentApiDeploy ? PAGE_TITLE.DEPLOY : PAGE_TITLE.PREVIEW;
        // Get the link of application log
        const applicationLogLink = isCurrentApiDeploy ? await this.projectBuilder.getApplicationLogURL() : '';
        // Render the preview view template
        const previewView = await templateFs.renderTemplate('templates/file-templates/Preview-template.xml', {
            pageSecondTitle: pageTitle,
            projectName: projectGeneratorContext.project.name,
            version: projectGeneratorContext.project.version,
            applicationLogLink: applicationLogLink,
            applicationLogEnabled: isCurrentApiDeploy,
            count: applicationsCount,
            webApplicationsDescripton: applicationsCount > 0 ? WEBAPP_SECTION_DESCRIPTION.NON_ZERO_APPS : WEBAPP_SECTION_DESCRIPTION.ZERO_APPS,
            servicesCount: servicesData.length,
        });
        fs.writeTextFile('app/assets/Preview.view.xml', previewView);
        const overviewPageData = {
            Services: servicesData,
        };
        // Render the overview page template
        const index = await templateFs.renderTemplate('templates/file-templates/OverviewPage-template.html', {
            pageTitle: pageTitle,
            data: JSON.stringify(overviewPageData),
        });
        fs.writeTextFile('app/index.html', index);
    }
    async getServicesTableData(projectGeneratorContext, isCurrentApiDeploy) {
        // Find srv module
        const serviceModule = projectGeneratorContext.project.modules.filter((module) => {
            return module.type === artifact_management_base_1.ModuleType.CAP && module.tags.includes(artifact_management_base_1.Tag.Srv);
        });
        const serviceEntities = serviceModule[0].items.filter((item) => {
            return item.type === artifact_management_base_1.ItemType.ODataV4ServiceEntity && item.external === false;
        });
        const servicesData = [];
        const pdmServiceData = [];
        // Iterate through the service items and find all non-external services
        for (const item of serviceModule[0].items) {
            if (item.type === artifact_management_base_1.ItemType.CAPService && item.external === false) {
                // If the current context is deployment, then add the service route entries in xs-app.json
                if (isCurrentApiDeploy) {
                    await this.addRoutesToServiceInXsApp(item, projectGeneratorContext.fs(), projectGeneratorContext);
                }
                // Filter service entities which belong to the current service and create service entity table entry
                const entities = serviceEntities.reduce((entities, entity) => {
                    // Get the ref of entity's parent service and check if it matches the current service we are iterating.
                    // If they match, then add the entity under the service entry in table
                    const parentServiceRef = entity.links.filter((link) => {
                        return link.linkType === artifact_management_base_1.LinkType.HAS_DEPENDENCY && link.type === artifact_management_base_1.ItemType.CAPService;
                    })[0].ref;
                    if (parentServiceRef === item.ref) {
                        entities.push({
                            Name: entity.name,
                            URL: `.${entity.ref}`,
                            FioriURL: !isCurrentApiDeploy ? `$fiori-preview/${item.name}/${entity.name}#preview-app` : '',
                        });
                    }
                    return entities;
                }, []);
                // Create service entry for services table
                const data = {
                    ServiceName: item.name,
                    DetailsURL: `.${item.ref}/`,
                    Metadata: `.${item.ref}/$metadata`,
                    Entities: entities,
                    EntitiesCount: entities.length,
                };
                if (item.info && item.info.isPDMService) {
                    pdmServiceData.push(data);
                }
                else {
                    servicesData.push(data);
                }
            }
        }
        servicesData.push(...pdmServiceData);
        return servicesData;
    }
    async addRoutesToServiceInXsApp(service, fs, projectGeneratorContext) {
        let routeAdded = false;
        const overviewAppFs = fs.navigate(this.overviewAppPath);
        const xsapp = await overviewAppFs.readJson('xs-app.json');
        if (!xsapp.routes) {
            xsapp.routes = [];
        }
        const capService = projectGeneratorContext.services.find((service) => {
            if (service.type === artifact_management_base_1.ServiceType.CAP_SERVICE) {
                return true;
            }
        }).name;
        // Add the route as first element in routes to take preference over other routes
        // which might redirect to default values.
        xsapp.routes.splice(0, 0, {
            source: `^${service.ref}/(.*)$`,
            target: `${service.ref}/$1`,
            destination: capService,
            authenticationType: 'xsuaa',
        });
        if (!routeAdded) {
            routeAdded = true;
        }
        await overviewAppFs.writeJSON('xs-app.json', xsapp);
        return routeAdded;
    }
}
exports.default = OverviewPageGenerator;
//# sourceMappingURL=OverviewPageGenerator.js.map