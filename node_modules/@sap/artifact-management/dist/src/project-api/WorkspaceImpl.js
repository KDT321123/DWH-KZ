"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const artifact_management_base_1 = require("@sap/artifact-management-base");
const ProjectImpl_1 = __importDefault(require("./ProjectImpl"));
const optionalRequire = require('optional-require')(require);
const { workspace } = optionalRequire('vscode') || {};
class WorkspaceImpl {
    constructor(path) {
        this.readModuleAsProject = true;
        this.path = path;
        if (!this.path) {
            this.workspaceFolders = workspace.workspaceFolders;
            workspace.onDidChangeWorkspaceFolders((event) => {
                if (this.watch !== undefined) {
                    this.watch(event);
                }
            });
        }
    }
    async getWorksapceFolders() {
        if (!this.workspaceFolders && this.path) {
            this.workspaceFolders = [];
            const fs = artifact_management_base_1.FileSystemFactory.getFileSystem(this.path);
            const subfolders = await fs.readDirectories();
            for (const folder of subfolders) {
                const workspaceFolder = {
                    uri: {
                        fsPath: fs.path(folder),
                    },
                };
                this.workspaceFolders.push(workspaceFolder);
            }
        }
        return this.workspaceFolders;
    }
    async getProjects(tag) {
        const projectApi = [];
        const workspaceFolders = await this.getWorksapceFolders();
        if (workspaceFolders && workspaceFolders.length > 0) {
            for (const folder of workspaceFolders) {
                const api = new ProjectImpl_1.default(folder.uri.fsPath, this.readModuleAsProject);
                const project = await api.read(undefined, tag);
                if (project) {
                    projectApi.push(api);
                }
            }
        }
        return projectApi;
    }
    async getProjectUris() {
        const uri = [];
        const workspaceFolders = await this.getWorksapceFolders();
        if (workspaceFolders && workspaceFolders.length > 0) {
            for (const folder of workspaceFolders) {
                uri.push(folder.uri);
            }
        }
        return uri;
    }
    startWatch() {
        if (workspace.workspaceFile) {
            this.watch = (event) => {
                let folders = [];
                let eventName = '';
                if (event.added.length > 0) {
                    folders = folders.concat(event.added);
                    eventName = 'add';
                }
                if (event.removed.length > 0) {
                    folders = folders.concat(event.removed);
                    eventName = 'remove';
                }
                if (this.workspaceChangeHandler !== undefined) {
                    this.workspaceChangeHandler(eventName, folders);
                }
                for (let i = 0; i < folders.length; i++) {
                    console.log(eventName, folders[i].uri.fsPath);
                }
            };
        }
    }
    stopWatch() {
        this.watch = undefined;
    }
    onWorkspaceChanged(handler) {
        this.workspaceChangeHandler = handler;
    }
}
exports.default = WorkspaceImpl;
//# sourceMappingURL=WorkspaceImpl.js.map