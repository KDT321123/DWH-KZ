import { ProjectFileSystem, Project, NameFactory, ProjectManifestGenerator, ModuleManifestGenerator, Service, ModuleGeneratorContext, UI5ModuleManifestGenerator } from '@sap/artifact-management-base';
import MtaGeneratorSettings from '../mta-generator/MtaGeneratorSettings';
import { ProjectBuilder } from '../project/ProjectBuilder';
export declare type ProjectGeneratorOptions = {
    project: Project;
    fs: ProjectFileSystem;
    options: MtaGeneratorSettings;
};
export default class CFProjectBuilder implements ProjectBuilder {
    static readonly type = "sap.project.plugin.type.mta-project-generator";
    project: Project;
    projectManifestGenerator: ProjectManifestGenerator;
    moduleGenerators: ModuleManifestGenerator[];
    resources: Service[];
    requiredServices: Set<Service>;
    moduleContext: ModuleGeneratorContext[];
    projectGeneratorContext: ModuleGeneratorContext;
    fs: ProjectFileSystem;
    nameFactory: NameFactory;
    useHeadlessGenerator: boolean;
    private moduleCommandMap;
    /**
     * Temporary files required for MTAR build
     */
    buildFs: ProjectFileSystem;
    constructor(project: Project, fs: ProjectFileSystem, useHeadlessGenerator?: boolean);
    build(): Promise<void>;
    isApplicationSummaryFilePresent(): Promise<boolean>;
    buildV2(): Promise<void>;
    private executePreBuildCommands;
    private generateModuleNamesToDeploy;
    private readStatusTracker;
    generateManifest(isDeltaBuild?: boolean): Promise<void>;
    private addResources;
    private getResourcesProvidedByGenerators;
    private generateMtaModules;
    postProcessUI5Module(moduleGenerator: UI5ModuleManifestGenerator, context: ModuleGeneratorContext): Promise<void>;
    private resolveRequires;
    private findService;
    private getModuleGenerators;
    mtarFileName(): string;
    private buildMtar;
    private buildMtad;
    deploy(): Promise<void>;
    deployV2(): Promise<void>;
    updateDeployedTime(): Promise<void>;
    getDeployedTime(): Promise<string>;
    getProjectOverviewURL(): Promise<string | undefined>;
    getApplicationLogURL(): Promise<string | undefined>;
    getOverviewApplicationId(): Promise<string>;
    private generateOverviewApplication;
    private generateURLFromMetadataService;
    private generateURLFromHtml5RepoService;
}
