import { Project, ItemFilter, Tag, ItemType, ModuleData, ProjectData, KeyIn, ProjectFileSystem, Item, ItemDetailInfoOptions } from '@sap/artifact-management-base';
import { ProjectInstance } from './ProjectInstance';
import ProjectApi from './ProjectApi';
import ItemWatcher from './ItemWatcher';
import AutoBuilder from './AutoBuilder';
import LocalFileSystemWatchManager from './LocalFileSystemWatchManager';
import { PlatformContext } from '../project/PlatformContext';
import { IChildLogger } from '@vscode-logging/types';
export default class ProjectImpl implements ProjectApi {
    private path;
    private cachedProjectInstance?;
    private watchClients;
    private watchManager?;
    private readModuleAsProject;
    private useHeadlessGenerator;
    constructor(path: string, readModuleAsProject?: boolean, useHeadlessGenerator?: boolean);
    autoBuild(logger?: IChildLogger): Promise<AutoBuilder>;
    projectInstance(): ProjectInstance;
    /**
     * Read project, its modules and entities
     *
     */
    read(logger?: IChildLogger, tag?: KeyIn<typeof Tag>): Promise<Project | undefined>;
    /**
     * Watch items
     *
     */
    watchItems(filter?: ItemFilter, logger?: IChildLogger): Promise<ItemWatcher>;
    startWatch(): LocalFileSystemWatchManager | undefined;
    stopWatch(obj: any): void;
    /**
     * Read project, its modules and entities
     *
     */
    tryRead(): Promise<Project>;
    fs(): ProjectFileSystem;
    /**
     * Read entities provided by the project
     *
     * @param filter
     */
    readItems(filter?: ItemFilter, logger?: IChildLogger): Promise<Item[]>;
    /**
     * Read detail information for the required type and ref provided by the project
     *
     * @param type
     * @param ref
     */
    getDetailInfo(type: KeyIn<typeof ItemType>, ref: string, entityPath?: string, options?: ItemDetailInfoOptions, logger?: IChildLogger): Promise<Item | undefined>;
    run(options?: string[] | undefined, logger?: IChildLogger): Promise<void>;
    buildManifest(context?: PlatformContext, logger?: IChildLogger): Promise<void>;
    getManifest(logger?: IChildLogger): Promise<any>;
    build(context?: PlatformContext, logger?: IChildLogger): Promise<void>;
    buildV2(context?: PlatformContext, logger?: IChildLogger): Promise<void>;
    private updateStatusTracker;
    deploy(logger?: IChildLogger): Promise<void>;
    deployV2(logger?: IChildLogger): Promise<void>;
    getProjectInfo(logger?: IChildLogger): Promise<ProjectData | undefined>;
    getModulesInfo(logger?: IChildLogger): Promise<ModuleData[]>;
    /**
     * @deprecated Use getApplicationDeploymentSummary() instead
     */
    getProjectOverviewURL(logger?: IChildLogger): Promise<string | undefined>;
    getApplicationDeploymentSummary(logger?: IChildLogger): Promise<{
        ProjectOverviewURL?: string;
        DeployedUTCTime?: string;
        ApplicationLogURL?: string;
    } | undefined>;
    invalidate_cachedLaunchURL(): Promise<void>;
    getDataInfo(data: any, mainEntityName?: string, logger?: IChildLogger): Promise<any>;
}
