import { Project, ItemFilter, Item, ProjectFileSystem, Tag, ItemType, ProjectData, ModuleData, KeyIn, ItemDetailInfoOptions } from '@sap/artifact-management-base';
import ItemWatcherApi from './ItemWatcherApi';
import AutoBuilder from './AutoBuilder';
import { IChildLogger } from '@vscode-logging/types';
import MtaGeneratorSettings from '../mta-generator/MtaGeneratorSettings';
export declare const ProjectApiType: {
    new (...args: any): ProjectApi;
    type: string;
};
export default interface ProjectApi {
    fs(): ProjectFileSystem;
    /**
     * Read project, its modules and entities
     *
     */
    read(logger?: IChildLogger, tag?: KeyIn<typeof Tag>): Promise<Project | undefined>;
    /**
     * Watch items
     *
     */
    watchItems(filter?: ItemFilter, logger?: IChildLogger): Promise<ItemWatcherApi>;
    /**
     * Auto build artifacts required when working with development tools
     */
    autoBuild(logger?: IChildLogger): Promise<AutoBuilder>;
    /**
     * Read entities provided by the project
     *
     * @param filter
     */
    readItems(filter?: ItemFilter, logger?: IChildLogger): Promise<Item[]>;
    /**
     * Read detail information for the required type, ref and optional entityPath provided by the project.
     * Currently, we support only "com.sap.cds/Entity" type.
     *
     * @param type
     * @param ref
     * @param entityPath
     */
    getDetailInfo(type: KeyIn<typeof ItemType>, ref: string, entityPath?: string, options?: ItemDetailInfoOptions, logger?: IChildLogger): Promise<Item | undefined>;
    /**
     * It starts the CDS server and watches for any modifications in the files, if any changes detected it automatically restarts to serve the new content.
     * @param options comma separated list of options and their values. e.g. ['port', '8008', 'open']. Currently only supports port number and open option.
     * @param logger
     */
    run(options?: string[] | undefined, logger?: IChildLogger): Promise<void>;
    build(options?: MtaGeneratorSettings, logger?: IChildLogger): Promise<void>;
    /**
     * Delta-build approach to build appliaction
     */
    buildV2(options?: MtaGeneratorSettings, logger?: IChildLogger): Promise<void>;
    /**
     * Deploy already built project
     */
    deploy(logger?: IChildLogger): Promise<void>;
    /**
     * Delta-deploy to create mtar and deploy
     */
    deployV2(logger?: IChildLogger): Promise<void>;
    /**
     * get Launch URL of Project Already Deployed
     */
    /**
     * @deprecated Use getApplicationDeploymentSummary() instead
     */
    getProjectOverviewURL(logger?: IChildLogger): Promise<string | undefined>;
    /**
     * Get Project level info of the project
     */
    getProjectInfo(logger?: IChildLogger): Promise<ProjectData | undefined>;
    /**
     * Get Module level info of all modules in project
     */
    getModulesInfo(logger?: IChildLogger): Promise<ModuleData[]>;
    /**
     * Get contents of mta.yaml file
     */
    getManifest(logger?: IChildLogger): Promise<any>;
    /**
     * Get summary of application deployment
     */
    getApplicationDeploymentSummary(logger?: IChildLogger): Promise<{
        ProjectOverviewURL?: string;
        DeployedUTCTime?: string;
        ApplicationLogURL?: string;
    } | undefined>;
    /**
     * Read and parse a data file (csv|xml), or generate the main entity for a data model
     * @param data
     * @param mainEntityName
     * @param logger
     */
    getDataInfo(data: any, mainEntityName?: string, logger?: IChildLogger): Promise<any>;
}
