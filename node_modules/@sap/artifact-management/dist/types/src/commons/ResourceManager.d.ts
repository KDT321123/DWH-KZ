declare type Constructor<T> = {
    new (...args: any): T;
};
export interface Resource<T> {
    id: string;
    type: Constructor<T>;
    get: () => T;
}
export default class ResourceManager {
    resources: Map<any, any>;
    register<T>(resource: Resource<T>): void;
    get<T>(id: string, type: Constructor<T>): T;
    findIfExists<T, F>(filter: F, type: {
        new (...args: any): T;
        filter: {
            new (...args: any): F;
        };
    }): T | undefined;
    find<T, F>(filter: F, type: {
        new (...args: any): T;
        filter: {
            new (...args: any): F;
        };
    }): T;
}
export {};
