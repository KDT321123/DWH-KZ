"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OdataVersion = exports.generate = void 0;
const path_1 = require("path");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const ejs_1 = require("ejs");
const ui5_config_1 = require("@sap-ux/ui5-config");
const prettify_xml_1 = __importDefault(require("prettify-xml"));
const data_1 = require("./data");
const i18n_1 = require("./i18n");
const types_1 = require("./types");
Object.defineProperty(exports, "OdataVersion", { enumerable: true, get: function () { return types_1.OdataVersion; } });
/**
 * Validates the provided base path.
 *
 * @param {string} basePath - the root path of an existing UI5 application
 * @param {Editor} fs - the memfs editor instance
 */
function validateBasePath(basePath, fs) {
    [path_1.join(basePath, 'package.json'), path_1.join(basePath, 'webapp', 'manifest.json'), path_1.join(basePath, 'ui5.yaml')].forEach((path) => {
        if (!fs.exists(path)) {
            throw new Error(i18n_1.t('error.requiredProjectFileNotFound', { path }));
        }
    });
}
/**
 * Writes the odata service related file updates to an existing UI5 project specified by the base path.
 *
 *
 * @param {string} basePath - the root path of an existing UI5 application
 * @param {OdataService} service - the OData service instance
 * @param {Editor} [fs] - the memfs editor instance
 * @throws {Error} - if required UI5 project files are not found
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
function generate(basePath, service, fs) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        if (!fs) {
            fs = mem_fs_editor_1.create(mem_fs_1.create());
        }
        validateBasePath(basePath, fs);
        data_1.enhanceData(service);
        // merge content into existing files
        const templateRoot = path_1.join(__dirname, '..', 'templates');
        const extRoot = path_1.join(templateRoot, 'extend');
        // manifest.json
        const manifestPath = path_1.join(basePath, 'webapp', 'manifest.json');
        // Get component app id
        const manifest = fs.readJSON(manifestPath);
        const appProp = 'sap.app';
        const appid = (_a = manifest === null || manifest === void 0 ? void 0 : manifest[appProp]) === null || _a === void 0 ? void 0 : _a.id;
        // Throw if required property is not found manifest.json
        if (!appid) {
            throw new Error(i18n_1.t('error.requiredProjectPropertyNotFound', { property: `'${appProp}'.id`, path: manifestPath }));
        }
        const manifestJsonExt = fs.read(path_1.join(extRoot, `manifest.json`));
        fs.extendJSON(manifestPath, JSON.parse(ejs_1.render(manifestJsonExt, service)));
        // ui5.yaml
        const ui5ConfigPath = path_1.join(basePath, 'ui5.yaml');
        const ui5Config = yield ui5_config_1.UI5Config.newInstance(fs.read(ui5ConfigPath));
        ui5Config.addBackendToFioriToolsProxydMiddleware(service.previewSettings);
        // ui5-local.yaml
        const ui5LocalConfigPath = path_1.join(basePath, 'ui5-local.yaml');
        const ui5LocalConfig = yield ui5_config_1.UI5Config.newInstance(fs.read(ui5LocalConfigPath));
        ui5LocalConfig.addFioriToolsProxydMiddleware({ backend: [service.previewSettings] });
        // Add mockserver entries
        if (service.metadata) {
            // package.json updates
            const mockDevDeps = {
                devDependencies: {
                    '@sap/ux-ui5-fe-mockserver-middleware': '1'
                }
            };
            const packagePath = path_1.join(basePath, 'package.json');
            fs.extendJSON(packagePath, mockDevDeps);
            // Extending here would overwrite existing array entries so we have to parse and push
            const packageJson = JSON.parse(fs.read(packagePath));
            packageJson.ui5.dependencies.push('@sap/ux-ui5-fe-mockserver-middleware');
            fs.writeJSON(packagePath, packageJson);
            // copy existing `ui5.yaml` as starting point for ui5-mock.yaml
            const ui5MockConfig = yield ui5_config_1.UI5Config.newInstance(ui5Config.toString());
            ui5MockConfig.addMockServerMiddleware(service.path);
            fs.write(path_1.join(basePath, 'ui5-mock.yaml'), ui5MockConfig.toString());
            // also add mockserver middleware to ui5-local.yaml
            ui5LocalConfig.addMockServerMiddleware(service.path);
            // create local copy of metadata and annotations
            fs.write(path_1.join(basePath, 'webapp', 'localService', 'metadata.xml'), prettify_xml_1.default(service.metadata, { indent: 4 }));
            // Adds local annotations to datasources section of manifest.json and writes the annotations file
            if (service.localAnnotationsName) {
                const namespaces = data_1.getAnnotationNamespaces(service);
                fs.copyTpl(path_1.join(templateRoot, 'add', 'annotation.xml'), path_1.join(basePath, 'webapp', 'annotations', `${service.localAnnotationsName}.xml`), Object.assign(Object.assign({}, service), { namespaces }));
            }
        }
        // write yamls to disk
        fs.write(ui5ConfigPath, ui5Config.toString());
        fs.write(ui5LocalConfigPath, ui5LocalConfig.toString());
        if ((_b = service.annotations) === null || _b === void 0 ? void 0 : _b.xml) {
            fs.write(path_1.join(basePath, 'webapp', 'localService', `${service.annotations.technicalName}.xml`), prettify_xml_1.default(service.annotations.xml, { indent: 4 }));
        }
        return fs;
    });
}
exports.generate = generate;
//# sourceMappingURL=index.js.map