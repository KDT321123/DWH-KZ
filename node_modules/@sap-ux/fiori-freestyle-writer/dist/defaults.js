"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDefaults = void 0;
const read_pkg_up_1 = __importDefault(require("read-pkg-up"));
const types_1 = require("./types");
/**
 * Set defaults for missing parameters on the given Fiori/UI5 app instance.
 *
 * @param app Fiori application configuration
 */
function setAppDefaults(app) {
    app.baseComponent = app.baseComponent || 'sap/ui/core/UIComponent';
    app.flpAppId = app.flpAppId || `${app.id.replace(/[-_.]/g, '')}-tile`;
}
/**
 * Set defaults for the basic template on the given instance.
 *
 * @param settings settings for the basic template
 */
function setBasicTemplateDefaults(settings) {
    settings.viewName = settings.viewName || 'View1';
}
/**
 * Set defaults for missing parameters on the given instance of the overal config.
 * Adds source template info.
 *
 * @param ffApp full config object used by the generate method
 */
function setDefaults(ffApp) {
    var _a, _b, _c;
    setAppDefaults(ffApp.app);
    // Add template information
    if (!((_a = ffApp.app.sourceTemplate) === null || _a === void 0 ? void 0 : _a.version) || !((_b = ffApp.app.sourceTemplate) === null || _b === void 0 ? void 0 : _b.id)) {
        const packageInfo = read_pkg_up_1.default.sync({ cwd: __dirname });
        ffApp.app.sourceTemplate = {
            id: `${packageInfo === null || packageInfo === void 0 ? void 0 : packageInfo.packageJson.name}:${ffApp.template.type}`,
            version: packageInfo === null || packageInfo === void 0 ? void 0 : packageInfo.packageJson.version,
            toolsId: (_c = ffApp.app.sourceTemplate) === null || _c === void 0 ? void 0 : _c.toolsId
        };
    }
    if (ffApp.template.type === types_1.TemplateType.Basic) {
        setBasicTemplateDefaults(ffApp.template.settings);
    }
    // All fiori-freestyle apps should use load reuse libs, unless explicitly overridden
    ffApp.appOptions = Object.assign({ loadReuseLibs: true }, ffApp.appOptions);
}
exports.setDefaults = setDefaults;
//# sourceMappingURL=defaults.js.map