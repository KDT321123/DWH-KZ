"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OdataVersion = exports.TemplateType = exports.generate = void 0;
const path_1 = require("path");
const ejs_1 = require("ejs");
const ui5_application_writer_1 = require("@sap-ux/ui5-application-writer");
const odata_service_writer_1 = require("@sap-ux/odata-service-writer");
const packageConfig_1 = require("./packageConfig");
const cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
const types_1 = require("./types");
const defaults_1 = require("./defaults");
/**
 * Generate a UI5 application based on the specified Fiori Freestyle floorplan template.
 *
 * @param basePath - the absolute target path where the application will be generated
 * @param data - configuration to generate the freestyle application
 * @param fs - an optional reference to a mem-fs editor
 * @returns Reference to a mem-fs-editor
 */
function generate(basePath, data, fs) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function* () {
        // Clone rather than modifying callers refs
        const ffApp = cloneDeep_1.default(data);
        // set defaults
        defaults_1.setDefaults(ffApp);
        fs = yield ui5_application_writer_1.generate(basePath, ffApp, fs);
        // add new and overwrite files from templates e.g.
        const tmplPath = path_1.join(__dirname, '..', 'templates');
        // Common files
        fs.copyTpl(path_1.join(tmplPath, 'common', 'add', '**/*.*'), basePath, ffApp);
        fs.copyTpl(path_1.join(tmplPath, ffApp.template.type, 'add', `**/*.*`), basePath, ffApp, undefined, {});
        if (ffApp.template.type === types_1.TemplateType.Basic) {
            const viewName = ffApp.template.settings.viewName;
            const viewTarget = path_1.join(basePath, 'webapp', 'view', `${viewName}.view.xml`);
            fs.copyTpl(path_1.join(tmplPath, ffApp.template.type, 'custom/View.xml'), viewTarget, ffApp);
            const controllerTarget = path_1.join(basePath, `webapp/controller/${viewName}.controller.js`);
            fs.copyTpl(path_1.join(tmplPath, ffApp.template.type, 'custom/Controller.js'), controllerTarget, ffApp);
        }
        // Add template specific manifest settings
        const manifestPath = path_1.join(basePath, 'webapp', 'manifest.json');
        const extRoot = path_1.join(__dirname, '..', 'templates', ffApp.template.type, 'extend', 'webapp');
        fs.extendJSON(manifestPath, JSON.parse(ejs_1.render(fs.read(path_1.join(extRoot, 'manifest.json')), ffApp)));
        // i18n.properties
        fs.append(path_1.join(basePath, 'webapp', 'i18n', 'i18n.properties'), ejs_1.render(fs.read(path_1.join(extRoot, 'i18n', 'i18n.properties')), ffApp));
        // package.json
        const packagePath = path_1.join(basePath, 'package.json');
        fs.extendJSON(packagePath, JSON.parse(ejs_1.render(fs.read(path_1.join(tmplPath, 'common', 'extend', 'package.json')), ffApp)));
        const packageJson = JSON.parse(fs.read(packagePath));
        packageJson.scripts = Object.assign(packageJson.scripts, Object.assign({}, packageConfig_1.getPackageJsonTasks({
            localOnly: !((_a = ffApp.service) === null || _a === void 0 ? void 0 : _a.url),
            addMock: !!((_b = ffApp.service) === null || _b === void 0 ? void 0 : _b.metadata),
            sapClient: (_c = ffApp.service) === null || _c === void 0 ? void 0 : _c.client,
            flpAppId: ffApp.app.flpAppId,
            startFile: (_d = data === null || data === void 0 ? void 0 : data.app) === null || _d === void 0 ? void 0 : _d.startFile,
            localStartFile: (_e = data === null || data === void 0 ? void 0 : data.app) === null || _e === void 0 ? void 0 : _e.localStartFile
        })));
        fs.writeJSON(packagePath, packageJson);
        // Add service to the project if provided
        if (ffApp.service) {
            yield odata_service_writer_1.generate(basePath, ffApp.service, fs);
        }
        return fs;
    });
}
exports.generate = generate;
var types_2 = require("./types");
Object.defineProperty(exports, "TemplateType", { enumerable: true, get: function () { return types_2.TemplateType; } });
Object.defineProperty(exports, "OdataVersion", { enumerable: true, get: function () { return types_2.OdataVersion; } });
//# sourceMappingURL=index.js.map