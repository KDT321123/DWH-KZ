"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendManifestJson = void 0;
const types_1 = require("../types");
const odata_service_writer_1 = require("@sap-ux/odata-service-writer");
const path_1 = require("path");
const ejs_1 = require("ejs");
/**
 * Extend the manifest.json file passed via the fs reference with the template and settings specified.
 * This extends by combining the version specific common manifest with the floorplan/template type
 * specific settings.
 *
 * @param fs - A reference to the in memory file system
 * @param targetPath - The target application path
 * @param rootTemplatesPath - The root path where the manifest templates will be found
 * @param feApp - The applicaiton config to be used by the manifest templates
 */
function extendManifestJson(fs, targetPath, rootTemplatesPath, feApp) {
    let templatePath = feApp.template.type;
    // FEOP and ALP v4 are variants of LROP and so we use the same template
    if (feApp.service.version === odata_service_writer_1.OdataVersion.v4 &&
        [
            types_1.TemplateType.FormEntryObjectPage,
            types_1.TemplateType.AnalyticalListPage,
            types_1.TemplateType.ListReportObjectPage,
            types_1.TemplateType.Worklist
        ].includes(feApp.template.type)) {
        templatePath = types_1.TemplateType.ListReportObjectPage;
    }
    // Enhance template settings
    const templateSettings = Object.assign(Object.assign({}, feApp.template.settings), { defaultModel: feApp.service.model, type: feApp.template.type });
    // Manifest paths to be extended
    const extendTemplatePaths = [
        path_1.join(rootTemplatesPath, 'common', 'extend', 'webapp'),
        path_1.join(rootTemplatesPath, templatePath, 'extend', 'webapp'),
        path_1.join(rootTemplatesPath, `v${feApp.service.version}`, templatePath, 'extend', 'webapp'),
        path_1.join(rootTemplatesPath, `v${feApp.service.version}`, 'common', 'extend', 'webapp')
    ];
    const manifestPath = path_1.join(targetPath, 'webapp', 'manifest.json');
    extendTemplatePaths.forEach((extendTemplatePath) => {
        const manifestTemplatePath = path_1.join(extendTemplatePath, 'manifest.json');
        if (fs.exists(manifestTemplatePath)) {
            fs.extendJSON(manifestPath, JSON.parse(ejs_1.render(fs.read(manifestTemplatePath), templateSettings)));
        }
    });
}
exports.extendManifestJson = extendManifestJson;
//# sourceMappingURL=manifestSettings.js.map