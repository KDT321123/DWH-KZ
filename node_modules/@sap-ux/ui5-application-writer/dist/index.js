"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const path_1 = require("path");
const data_1 = require("./data");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const json_merger_1 = require("json-merger");
const ejs_1 = require("ejs");
const files_1 = require("./files");
const ui5_config_1 = require("@sap-ux/ui5-config");
/**
 * Writes the template to the memfs editor instance.
 *
 * @param {string} basePath - the base path
 * @param {Ui5App} ui5AppConfig - the Ui5App instance
 * @param {Editor} [fs] - the memfs editor instance
 * @returns {*}  {Promise<Editor>} the updated memfs editor instance
 */
function generate(basePath, ui5AppConfig, fs) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if (!fs) {
            fs = mem_fs_editor_1.create(mem_fs_1.create());
        }
        const ui5App = data_1.mergeWithDefaults(ui5AppConfig);
        const tmplPath = path_1.join(__dirname, '..', 'templates');
        fs.copyTpl(path_1.join(tmplPath, 'core', '**/*.*'), path_1.join(basePath), ui5App, undefined, {
            globOptions: { dot: true },
            processDestinationPath: (filePath) => filePath.replace(/gitignore.tmpl/g, '.gitignore')
        });
        // ui5.yaml
        const ui5ConfigPath = path_1.join(basePath, 'ui5.yaml');
        const ui5Config = yield ui5_config_1.UI5Config.newInstance(fs.read(ui5ConfigPath));
        ui5Config.addFioriToolsProxydMiddleware({
            ui5: {
                url: (_a = ui5App.ui5) === null || _a === void 0 ? void 0 : _a.frameworkUrl
            }
        });
        ui5Config.addFioriToolsAppReloadMiddleware();
        fs.write(ui5ConfigPath, ui5Config.toString());
        // ui5-local.yaml
        const ui5LocalConfigPath = path_1.join(basePath, 'ui5-local.yaml');
        const ui5LocalConfig = yield ui5_config_1.UI5Config.newInstance(fs.read(ui5LocalConfigPath));
        ui5LocalConfig.addUI5Framework(ui5App.ui5.framework, ui5App.ui5.localVersion, ui5App.ui5.ui5Libs, ui5App.ui5.ui5Theme);
        ui5LocalConfig.addFioriToolsAppReloadMiddleware();
        fs.write(ui5LocalConfigPath, ui5LocalConfig.toString());
        // Add optional features
        if (ui5App.appOptions) {
            Object.entries(ui5App.appOptions).forEach(([key, value]) => {
                if (value === true) {
                    const optTmplDirPath = path_1.join(tmplPath, 'optional', `${key}`);
                    const optTmplFilePaths = files_1.getFilePaths(optTmplDirPath);
                    optTmplFilePaths.forEach((optTmplFilePath) => {
                        const relPath = optTmplFilePath.replace(optTmplDirPath, '');
                        const outPath = path_1.join(basePath, relPath);
                        // Extend or add
                        if (!(fs === null || fs === void 0 ? void 0 : fs.exists(outPath))) {
                            fs === null || fs === void 0 ? void 0 : fs.copyTpl(optTmplFilePath, outPath, ui5App, undefined, {
                                globOptions: { dot: true }
                            });
                        }
                        else {
                            const add = JSON.parse(ejs_1.render(fs === null || fs === void 0 ? void 0 : fs.read(optTmplFilePath), ui5App));
                            const existingFile = JSON.parse(fs === null || fs === void 0 ? void 0 : fs.read(outPath));
                            const merged = json_merger_1.mergeObjects([existingFile, add], { defaultArrayMergeOperation: 'concat' });
                            fs === null || fs === void 0 ? void 0 : fs.writeJSON(outPath, merged);
                        }
                    });
                }
            });
        }
        return fs;
    });
}
exports.generate = generate;
//# sourceMappingURL=index.js.map