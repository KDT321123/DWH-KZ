import type { App, Package, UI5 } from '../types';
/**
 * Returns a package instance with default properties.
 *
 * @param {string} [version] - the package version
 * @param {string} [description] - the package description
 * @returns {Partial<Package>} the package instance
 */
export declare function packageDefaults(version?: string, description?: string): Partial<Package>;
/**
 * Merges 2 package definitions. All properties from A and from B will be present.
 * Overlapping properties will be replaced from B. Arrays will be concatenated.
 * `ui5.dependencies` will be de-duped.
 *
 * @param packageA - a partial package definition
 * @param packageB - a partial package definition
 * @returns - a merged package defintion
 */
export declare function mergePackages(packageA: Partial<Package>, packageB: Partial<Package>): Package;
/**
 * Returns an app instance merged with default properties.
 *
 * @param {App} app - specifies the application properties
 * @returns {Partial<App>} the App instance
 */
export declare function mergeApp(app: App): App;
export declare enum UI5_DEFAULT {
    DEFAULT_UI5_VERSION = "",
    DEFAULT_LOCAL_UI5_VERSION = "1.95.0",
    MIN_UI5_VERSION = "1.60.0",
    MIN_LOCAL_SAPUI5_VERSION = "1.76.0",
    MIN_LOCAL_OPENUI5_VERSION = "1.52.5",
    SAPUI5_CDN = "https://ui5.sap.com",
    OPENUI5_CDN = "https://openui5.hana.ondemand.com",
    TYPES_VERSION_SINCE = "1.76.0",
    TYPES_VERSION_PREVIOUS = "1.71.18",
    MANIFEST_VERSION = "1.12.0"
}
export declare const defaultUI5Libs: string[];
/**
 * Merges version properties with the provided UI5 instance.
 * Coerces provided UI5 versions to valid semantic versions.
 *
 * @param {UI5} [ui5] - the UI5 instance
 * @returns {UI5} the updated copy of UI5 instance (does not change `ui5`)
 */
export declare function mergeUi5(ui5: Partial<UI5>): UI5;
//# sourceMappingURL=defaults.d.ts.map