"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeUi5 = exports.defaultUI5Libs = exports.UI5_DEFAULT = exports.mergeApp = exports.mergePackages = exports.packageDefaults = void 0;
const version_to_descriptor_mapping_json_1 = __importDefault(require("./version-to-descriptor-mapping.json")); // from https://github.com/SAP/ui5-manifest/blob/master/mapping.json
const ui5Libs_1 = require("./ui5Libs");
const semver_1 = __importDefault(require("semver"));
const i18n_1 = require("../i18n");
const json_merger_1 = require("json-merger");
/**
 * Returns a package instance with default properties.
 *
 * @param {string} [version] - the package version
 * @param {string} [description] - the package description
 * @returns {Partial<Package>} the package instance
 */
function packageDefaults(version, description) {
    return {
        version: version || '0.0.1',
        description: description || '',
        devDependencies: {
            '@ui5/cli': '^2.14.1',
            '@sap/ux-ui5-tooling': '1'
        },
        scripts: {
            start: 'ui5 serve --config=ui5.yaml --open index.html',
            'start-local': 'ui5 serve --config=ui5-local.yaml --open index.html',
            build: 'ui5 build --config=ui5.yaml --clean-dest --dest dist'
        },
        ui5: {
            dependencies: ['@sap/ux-ui5-tooling']
        }
    };
}
exports.packageDefaults = packageDefaults;
/**
 * Merges 2 package definitions. All properties from A and from B will be present.
 * Overlapping properties will be replaced from B. Arrays will be concatenated.
 * `ui5.dependencies` will be de-duped.
 *
 * @param packageA - a partial package definition
 * @param packageB - a partial package definition
 * @returns - a merged package defintion
 */
function mergePackages(packageA, packageB) {
    var _a;
    const mergedPackage = json_merger_1.mergeObjects([packageA, packageB], {
        defaultArrayMergeOperation: 'concat'
    });
    // de-dup package.ui5.dependencies
    if ((_a = mergedPackage.ui5) === null || _a === void 0 ? void 0 : _a.dependencies) {
        mergedPackage.ui5.dependencies = Array.from(new Set(mergedPackage.ui5.dependencies));
    }
    return mergedPackage;
}
exports.mergePackages = mergePackages;
/**
 * Returns an app instance merged with default properties.
 *
 * @param {App} app - specifies the application properties
 * @returns {Partial<App>} the App instance
 */
function mergeApp(app) {
    var _a, _b, _c, _d, _e;
    return json_merger_1.mergeObjects([
        {
            version: '0.0.1',
            title: i18n_1.t('text.defaultAppTitle', { id: app.id }),
            description: i18n_1.t('text.defaultAppDescription', { id: app.id }),
            baseComponent: 'sap/ui/core/UIComponent',
            sourceTemplate: {
                id: (_b = (_a = app.sourceTemplate) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '',
                version: (_d = (_c = app.sourceTemplate) === null || _c === void 0 ? void 0 : _c.version) !== null && _d !== void 0 ? _d : '',
                toolsId: (_e = app.sourceTemplate) === null || _e === void 0 ? void 0 : _e.toolsId
            }
        },
        app
    ]);
}
exports.mergeApp = mergeApp;
var UI5_DEFAULT;
(function (UI5_DEFAULT) {
    UI5_DEFAULT["DEFAULT_UI5_VERSION"] = "";
    UI5_DEFAULT["DEFAULT_LOCAL_UI5_VERSION"] = "1.95.0";
    UI5_DEFAULT["MIN_UI5_VERSION"] = "1.60.0";
    UI5_DEFAULT["MIN_LOCAL_SAPUI5_VERSION"] = "1.76.0";
    UI5_DEFAULT["MIN_LOCAL_OPENUI5_VERSION"] = "1.52.5";
    UI5_DEFAULT["SAPUI5_CDN"] = "https://ui5.sap.com";
    UI5_DEFAULT["OPENUI5_CDN"] = "https://openui5.hana.ondemand.com";
    UI5_DEFAULT["TYPES_VERSION_SINCE"] = "1.76.0";
    UI5_DEFAULT["TYPES_VERSION_PREVIOUS"] = "1.71.18";
    UI5_DEFAULT["MANIFEST_VERSION"] = "1.12.0";
})(UI5_DEFAULT = exports.UI5_DEFAULT || (exports.UI5_DEFAULT = {}));
// Required default libs
exports.defaultUI5Libs = ['sap.m', 'sap.ui.core'];
/**
 * Merges version properties with the provided UI5 instance.
 * Coerces provided UI5 versions to valid semantic versions.
 *
 * @param {UI5} [ui5] - the UI5 instance
 * @returns {UI5} the updated copy of UI5 instance (does not change `ui5`)
 */
function mergeUi5(ui5) {
    var _a, _b, _c, _d, _e;
    const version = (_a = ui5.version) !== null && _a !== void 0 ? _a : UI5_DEFAULT.DEFAULT_UI5_VERSION; // Undefined or null indicates the latest available should be used
    const framework = (_b = ui5.framework) !== null && _b !== void 0 ? _b : 'SAPUI5';
    const defaultFrameworkUrl = framework === 'SAPUI5' ? UI5_DEFAULT.SAPUI5_CDN : UI5_DEFAULT.OPENUI5_CDN;
    const merged = {
        minUI5Version: getMinUI5Version(version, ui5.minUI5Version),
        localVersion: getLocalVersion({ framework, version, localVersion: ui5.localVersion }),
        version,
        framework,
        frameworkUrl: (_c = ui5.frameworkUrl) !== null && _c !== void 0 ? _c : defaultFrameworkUrl
    };
    // typesVersion must be a valid npm semantic version, we know they cannot be null as already validated
    const localSemVer = semver_1.default.valid(semver_1.default.coerce(merged.localVersion));
    const typesVersion = semver_1.default.gte(localSemVer, UI5_DEFAULT.TYPES_VERSION_SINCE)
        ? localSemVer
        : UI5_DEFAULT.TYPES_VERSION_PREVIOUS;
    merged.descriptorVersion = getManifestVersion(merged.minUI5Version, ui5.descriptorVersion);
    merged.typesVersion = (_d = ui5.typesVersion) !== null && _d !== void 0 ? _d : typesVersion;
    merged.ui5Theme = (_e = ui5.ui5Theme) !== null && _e !== void 0 ? _e : 'sap_fiori_3';
    merged.ui5Libs = ui5Libs_1.getUI5Libs(ui5.ui5Libs);
    return Object.assign({}, ui5, merged);
}
exports.mergeUi5 = mergeUi5;
/**
 * Gets the miminum UI5 version based on the specified version.
 *
 * @param ui5Version - the ui5 version
 * @param minUI5Version - optional minimum ui5 version
 * @returns minimum UI5 version for manifest
 */
function getMinUI5Version(ui5Version, minUI5Version) {
    return minUI5Version !== null && minUI5Version !== void 0 ? minUI5Version : (ui5Version ? ui5Version : UI5_DEFAULT.MIN_UI5_VERSION);
}
/**
 * Get the manifest descriptor version from the specified UI5 version.
 * Snapshots are handled by coercion to proper versions. If the version does not exist as an exact match
 * the nearest version lower will be used.
 *
 * @param ui5Version - the ui5 version to be used to map to the manifest descriptor version
 * @param manifestVersion - optional manifest descriptor version to be used if provided
 * @returns - the manifest descriptor version
 */
function getManifestVersion(ui5Version, manifestVersion) {
    var _a;
    const ui5SemVer = semver_1.default.coerce(ui5Version);
    /**
     * Finds the closest manifest version for the specified ui5 version. This is determined
     * by finding the closest lower ui5 version and returning its corresponding manifest version.
     *
     * @example For a version to manifest json containing :
     * ```
     * ...
     * "1.90": "1.33.0",
     * "1.88": "1.32.0"
     * ...
     * ```
     * Specifiying version as `1.89.0` will return manifest version `1.32.0`
     * @param version the ui5 version used to determine the closest manifest version
     * @returns closest matching manifest version or undefined, if none found (below lowest value)
     */
    const getClosestManifestVersion = (version) => {
        const verToManifestVer = version_to_descriptor_mapping_json_1.default;
        let matchVersion = verToManifestVer[`${semver_1.default.major(version)}.${semver_1.default.minor(version)}`];
        if (!matchVersion) {
            const sortedSemVers = Object.keys(verToManifestVer)
                .filter((ver) => ver !== 'latest')
                .map((verStr) => semver_1.default.coerce(verStr))
                .sort((a, b) => semver_1.default.rcompare(a, b));
            const latestUI5SemVer = sortedSemVers[0];
            // ui5 version is greater than the latest use the latest
            if (semver_1.default.gt(version, latestUI5SemVer)) {
                matchVersion = verToManifestVer[`${latestUI5SemVer.major}.${latestUI5SemVer.minor}`];
            }
            else {
                // Find the nearest lower
                const nearest = sortedSemVers.find((mapVer) => {
                    return semver_1.default.gt(version, mapVer);
                });
                if (nearest) {
                    matchVersion = verToManifestVer[`${nearest.major}.${nearest.minor}`];
                }
            }
        }
        return matchVersion;
    };
    return (_a = manifestVersion !== null && manifestVersion !== void 0 ? manifestVersion : (ui5SemVer && getClosestManifestVersion(ui5SemVer))) !== null && _a !== void 0 ? _a : UI5_DEFAULT.MANIFEST_VERSION;
}
/**
 * If a specific local version is provided, use it, otherwise, sync with version but keep minimum versions in mind.
 *
 * @param inputObj input object
 * @param inputObj.framework UI framework
 * @param inputObj.version UI version
 * @param inputObj.localVersion local UI version
 * @returns {string} of the local UI5 version
 */
function getLocalVersion({ framework, version, localVersion }) {
    // If explictly provided use, we deliberately do not coerce
    if (localVersion) {
        return localVersion;
    }
    else if (version === UI5_DEFAULT.DEFAULT_UI5_VERSION) {
        return UI5_DEFAULT.DEFAULT_LOCAL_UI5_VERSION;
    }
    let result = framework === 'SAPUI5' ? UI5_DEFAULT.MIN_LOCAL_SAPUI5_VERSION : UI5_DEFAULT.MIN_LOCAL_OPENUI5_VERSION; // minimum version available as local libs
    // If the ui5 `version` is higher than the min framework version 'result' then use that as the local version instead
    // Update to a valid coerced version string e.g. snapshot-1.80 -> 1.80.0. Cannot be null as previously validated.
    const versionSemVer = semver_1.default.coerce(version);
    if (semver_1.default.gt(versionSemVer, semver_1.default.coerce(result))) {
        result = semver_1.default.valid(versionSemVer);
    }
    return result;
}
//# sourceMappingURL=defaults.js.map