PROCEDURE "kz.DI.ERP.Procedures::DataExtractDelta0001"( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
  /*
  DECLARE V_BATCH_NUM INTEGER DEFAULT 5000;
  DECLARE V_TOTAL_NUM INTEGER;
  DECLARE V_NUM INTEGER;
  DECLARE V_TIMES INTEGER;
  DECLARE V_INDEX INTEGER DEFAULT 0;
  DECLARE V_OFFSET INTEGER;
  
  DECLARE V_SYSTEM NVARCHAR(20);
  DECLARE V_OBJECT NVARCHAR(150);
  DECLARE V_START_TIME TIMESTAMP;
  DECLARE V_END_TIME TIMESTAMP;
  DECLARE V_RUN_TIMES INTEGER;
  DECLARE V_GUID_FROM NVARCHAR(50);
  DECLARE V_GUID_TO NVARCHAR(50);
  DECLARE V_RECORDS INTEGER;
  DECLARE V_STATUS NVARCHAR(2);
  DECLARE V_MESSAGE NVARCHAR(5000);
 
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    
    ROLLBACK;
    
    V_END_TIME := CURRENT_TIMESTAMP;
    V_RUN_TIMES := SECONDS_BETWEEN(:V_START_TIME, :V_END_TIME);
    V_STATUS := 'F';
    V_MESSAGE := CAST(::SQL_ERROR_MESSAGE AS NVARCHAR(5000));
    
    INSERT INTO "kz.DI.ERP.Tables::DI_ERP_Log" VALUES( "kz.DI.ERP.Tables::ID".NEXTVAL,
                                                       :V_SYSTEM,
                                                       :V_OBJECT,
                                                       :V_START_TIME,
                                                       :V_END_TIME,
                                                       :V_RUN_TIMES,
                                                       :V_GUID_FROM,
                                                       :V_GUID_TO,
                                                       :V_RECORDS,
                                                       :V_STATUS,
                                                       :V_MESSAGE
                                                     );
    
  END;
  
  V_SYSTEM := 'ERP';
  V_OBJECT := 'B_Case';
  V_START_TIME := CURRENT_TIMESTAMP;
  
  SELECT MAX(GUID_TO) AS GUID_TO
    INTO V_GUID_TO
    FROM "kz.DI.ERP.Tables::DI_ERP_Log"
   WHERE STATUS = 'S'
     AND SYSTEM = :V_SYSTEM
     AND OBJECT = :V_OBJECT;
  
  IF :V_GUID_TO IS NULL THEN
    
    LT_SECTION =
    SELECT MIN("B_Case_rowversion") AS GUID_FROM,
           MAX("B_Case_rowversion") AS GUID_TO,
           COUNT(1) AS TOTAL_NUM
      FROM "kz.DI.ERP::V_B_Case";
    
  ELSE
    
    LT_SECTION =
    SELECT MIN("B_Case_rowversion") AS GUID_FROM,
           MAX("B_Case_rowversion") AS GUID_TO,
           COUNT(1) AS TOTAL_NUM
      FROM "kz.DI.ERP::V_B_Case"
     WHERE "B_Case_rowversion" > :V_GUID_TO;
    
  END IF;
  
  SELECT COUNT(1) AS NUM INTO V_NUM FROM :LT_SECTION;
  IF :V_NUM > 0 THEN
    V_GUID_FROM := :LT_SECTION.GUID_FROM[1];
    V_GUID_TO := :LT_SECTION.GUID_TO[1];
    V_TOTAL_NUM := :LT_SECTION.TOTAL_NUM[1];
  END IF;
  
  V_TIMES := ROUND( V_TOTAL_NUM / V_BATCH_NUM, 0, ROUND_UP);
  V_TOTAL_NUM := 0;
  V_NUM := 0;
  WHILE :V_INDEX < :V_TIMES DO
    
    V_OFFSET := :V_BATCH_NUM * :V_INDEX;
    
    LT_LIST =
    SELECT *
      FROM "kz.DI.ERP::V_B_Case"
     WHERE "B_Case_rowversion" BETWEEN :V_GUID_FROM AND :V_GUID_TO
     ORDER BY "B_Case_id" LIMIT :V_BATCH_NUM OFFSET :V_OFFSET;
    
    SELECT COUNT(1) AS NUM INTO V_NUM FROM :LT_LIST;
    
    UPSERT "kz.DI.ERP::T_B_Case" SELECT * FROM :LT_LIST;
    
    V_TOTAL_NUM := :V_TOTAL_NUM + :V_NUM;
    V_INDEX := :V_INDEX + 1;
    
  END WHILE;
  
  V_END_TIME := CURRENT_TIMESTAMP;
  V_RUN_TIMES := SECONDS_BETWEEN(:V_START_TIME, :V_END_TIME);
  V_RECORDS := :V_TOTAL_NUM;
  V_STATUS := 'S';
  V_MESSAGE := '';
  
  INSERT INTO "kz.DI.ERP.Tables::DI_ERP_Log" VALUES( "kz.DI.ERP.Tables::ID".NEXTVAL,
                                                     :V_SYSTEM,
                                                     :V_OBJECT,
                                                     :V_START_TIME,
                                                     :V_END_TIME,
                                                     :V_RUN_TIMES,
                                                     :V_GUID_FROM,
                                                     :V_GUID_TO,
                                                     :V_RECORDS,
                                                     :V_STATUS,
                                                     :V_MESSAGE
                                                   );
  
  COMMIT;
  */
END;